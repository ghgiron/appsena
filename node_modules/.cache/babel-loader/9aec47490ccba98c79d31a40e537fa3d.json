{"ast":null,"code":"import { createEntityAdapter, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport moment from 'moment';\nexport const dateFormat = 'YYYY-MM-DDTHH:mm:ss.sssZ';\nexport const getEvents = createAsyncThunk('calendarApp/events/getEvents', async () => {\n  const response = await axios.get('/api/calendar-app/events');\n  const data = await response.data;\n  return data;\n});\nexport const addEvent = createAsyncThunk('calendarApp/events/addEvent', async (newEvent, {\n  dispatch\n}) => {\n  const response = await axios.post('/api/calendar-app/add-event', {\n    newEvent\n  });\n  const data = await response.data;\n  return data;\n});\nexport const updateEvent = createAsyncThunk('calendarApp/events/updateEvent', async (event, {\n  dispatch\n}) => {\n  const response = await axios.post('/api/calendar-app/update-event', {\n    event\n  });\n  const data = await response.data;\n  return data;\n});\nexport const removeEvent = createAsyncThunk('calendarApp/events/remove-event', async (eventId, {\n  dispatch\n}) => {\n  const response = await axios.post('/api/calendar-app/remove-event', {\n    eventId\n  });\n  const data = await response.data;\n  return data.id;\n});\nconst eventsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectEvents,\n  selectIds: selectEventIds,\n  selectById: selectEventById\n} = eventsAdapter.getSelectors(state => state.calendarApp.events);\nconst eventsSlice = createSlice({\n  name: 'calendarApp/events',\n  initialState: eventsAdapter.getInitialState({\n    eventDialog: {\n      type: 'new',\n      props: {\n        open: false\n      },\n      data: null\n    }\n  }),\n  reducers: {\n    openNewEventDialog: {\n      prepare: event => {\n        const payload = {\n          type: 'new',\n          props: {\n            open: true\n          },\n          data: {\n            start: moment(event.start).format(dateFormat).toString(),\n            end: moment(event.end).format(dateFormat).toString()\n          }\n        };\n        return {\n          payload\n        };\n      },\n      reducer: (state, action) => {\n        state.eventDialog = action.payload;\n      }\n    },\n    openEditEventDialog: {\n      prepare: event => {\n        const payload = {\n          type: 'edit',\n          props: {\n            open: true\n          },\n          data: { ...event,\n            start: moment(event.start).format(dateFormat).toString(),\n            end: moment(event.end).format(dateFormat).toString()\n          }\n        };\n        return {\n          payload\n        };\n      },\n      reducer: (state, action) => {\n        state.eventDialog = action.payload;\n      }\n    },\n    closeNewEventDialog: (state, action) => {\n      state.eventDialog = {\n        type: 'new',\n        props: {\n          open: false\n        },\n        data: null\n      };\n    },\n    closeEditEventDialog: (state, action) => {\n      state.eventDialog = {\n        type: 'edit',\n        props: {\n          open: false\n        },\n        data: null\n      };\n    }\n  },\n  extraReducers: {\n    [getEvents.fulfilled]: eventsAdapter.setAll,\n    [addEvent.fulfilled]: eventsAdapter.addOne,\n    [updateEvent.fulfilled]: eventsAdapter.upsertOne,\n    [removeEvent.fulfilled]: eventsAdapter.removeOne\n  }\n});\nexport const {\n  openNewEventDialog,\n  closeNewEventDialog,\n  openEditEventDialog,\n  closeEditEventDialog\n} = eventsSlice.actions;\nexport default eventsSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/calendar/store/eventsSlice.js"],"names":["createEntityAdapter","createSlice","createAsyncThunk","axios","moment","dateFormat","getEvents","response","get","data","addEvent","newEvent","dispatch","post","updateEvent","event","removeEvent","eventId","id","eventsAdapter","selectAll","selectEvents","selectIds","selectEventIds","selectById","selectEventById","getSelectors","state","calendarApp","events","eventsSlice","name","initialState","getInitialState","eventDialog","type","props","open","reducers","openNewEventDialog","prepare","payload","start","format","toString","end","reducer","action","openEditEventDialog","closeNewEventDialog","closeEditEventDialog","extraReducers","fulfilled","setAll","addOne","upsertOne","removeOne","actions"],"mappings":"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","sourcesContent":["import { createEntityAdapter, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport moment from 'moment';\n\nexport const dateFormat = 'YYYY-MM-DDTHH:mm:ss.sssZ';\n\nexport const getEvents = createAsyncThunk('calendarApp/events/getEvents', async () => {\n\tconst response = await axios.get('/api/calendar-app/events');\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const addEvent = createAsyncThunk('calendarApp/events/addEvent', async (newEvent, { dispatch }) => {\n\tconst response = await axios.post('/api/calendar-app/add-event', {\n\t\tnewEvent\n\t});\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const updateEvent = createAsyncThunk('calendarApp/events/updateEvent', async (event, { dispatch }) => {\n\tconst response = await axios.post('/api/calendar-app/update-event', { event });\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const removeEvent = createAsyncThunk('calendarApp/events/remove-event', async (eventId, { dispatch }) => {\n\tconst response = await axios.post('/api/calendar-app/remove-event', { eventId });\n\tconst data = await response.data;\n\n\treturn data.id;\n});\n\nconst eventsAdapter = createEntityAdapter({});\n\nexport const {\n\tselectAll: selectEvents,\n\tselectIds: selectEventIds,\n\tselectById: selectEventById\n} = eventsAdapter.getSelectors(state => state.calendarApp.events);\n\nconst eventsSlice = createSlice({\n\tname: 'calendarApp/events',\n\tinitialState: eventsAdapter.getInitialState({\n\t\teventDialog: {\n\t\t\ttype: 'new',\n\t\t\tprops: {\n\t\t\t\topen: false\n\t\t\t},\n\t\t\tdata: null\n\t\t}\n\t}),\n\treducers: {\n\t\topenNewEventDialog: {\n\t\t\tprepare: event => {\n\t\t\t\tconst payload = {\n\t\t\t\t\ttype: 'new',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\topen: true\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tstart: moment(event.start).format(dateFormat).toString(),\n\t\t\t\t\t\tend: moment(event.end).format(dateFormat).toString()\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn { payload };\n\t\t\t},\n\t\t\treducer: (state, action) => {\n\t\t\t\tstate.eventDialog = action.payload;\n\t\t\t}\n\t\t},\n\t\topenEditEventDialog: {\n\t\t\tprepare: event => {\n\t\t\t\tconst payload = {\n\t\t\t\t\ttype: 'edit',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\topen: true\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...event,\n\t\t\t\t\t\tstart: moment(event.start).format(dateFormat).toString(),\n\t\t\t\t\t\tend: moment(event.end).format(dateFormat).toString()\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn { payload };\n\t\t\t},\n\t\t\treducer: (state, action) => {\n\t\t\t\tstate.eventDialog = action.payload;\n\t\t\t}\n\t\t},\n\t\tcloseNewEventDialog: (state, action) => {\n\t\t\tstate.eventDialog = {\n\t\t\t\ttype: 'new',\n\t\t\t\tprops: {\n\t\t\t\t\topen: false\n\t\t\t\t},\n\t\t\t\tdata: null\n\t\t\t};\n\t\t},\n\t\tcloseEditEventDialog: (state, action) => {\n\t\t\tstate.eventDialog = {\n\t\t\t\ttype: 'edit',\n\t\t\t\tprops: {\n\t\t\t\t\topen: false\n\t\t\t\t},\n\t\t\t\tdata: null\n\t\t\t};\n\t\t}\n\t},\n\textraReducers: {\n\t\t[getEvents.fulfilled]: eventsAdapter.setAll,\n\t\t[addEvent.fulfilled]: eventsAdapter.addOne,\n\t\t[updateEvent.fulfilled]: eventsAdapter.upsertOne,\n\t\t[removeEvent.fulfilled]: eventsAdapter.removeOne\n\t}\n});\n\nexport const {\n\topenNewEventDialog,\n\tcloseNewEventDialog,\n\topenEditEventDialog,\n\tcloseEditEventDialog\n} = eventsSlice.actions;\n\nexport default eventsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}