{"ast":null,"code":"import*as Prism from'prismjs';import React,{useEffect,useRef}from'react';import'./prism-languages';function FuseHighlight(props){var domNode=useRef(null);var source=useRef(trimCode());useEffect(function(){function highlight(){Prism.highlightElement(domNode.current,props.async);}highlight();},[props.async]);function trimCode(){var sourceString=props.children;if(typeof sourceString==='object'&&sourceString.default){sourceString=sourceString.default;}// Split the source into lines\nvar sourceLines=sourceString.split('\\n');// Remove the first and the last line of the source\n// code if they are blank lines. This way, the html\n// can be formatted properly while using fuse-highlight\n// component\nif(!sourceLines[0].trim()){sourceLines.shift();}if(!sourceLines[sourceLines.length-1].trim()){sourceLines.pop();}// Find the first non-whitespace char index in\n// the first line of the source code\nvar indexOfFirstChar=sourceLines[0].search(/\\S|$/);// Generate the trimmed source\nvar sourceRaw='';// Iterate through all the lines\nsourceLines.forEach(function(line,index){// Trim the beginning white space depending on the index\n// and concat the source code\nsourceRaw+=line.substr(indexOfFirstChar,line.length);// If it's not the last line...\nif(index!==sourceLines.length-1){// Add a line break at the end\nsourceRaw=\"\".concat(sourceRaw,\"\\n\");}});return sourceRaw;}var className=props.className,Wrapper=props.component;return/*#__PURE__*/React.createElement(Wrapper,{ref:domNode,className:className},source.current);}FuseHighlight.defaultProps={component:'code'};export default React.memo(FuseHighlight);","map":null,"metadata":{},"sourceType":"module"}