{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyectos_react\\\\Proyecto_sena_desarrollo\\\\src\\\\app\\\\fuse-layouts\\\\shared-components\\\\chatPanel\\\\ContactList.js\";\nimport FuseAnimateGroup from '@fuse/core/FuseAnimateGroup';\nimport FuseScrollbars from '@fuse/core/FuseScrollbars';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getChat } from './store/chatSlice';\nimport { selectContacts } from './store/contactsSlice';\nimport { openChatPanel } from './store/stateSlice';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: theme.palette.background.paper\n  },\n  contactButton: {\n    width: 70,\n    minWidth: 70,\n    flex: '0 0 auto',\n    '&.active:after': {\n      position: 'absolute',\n      top: 8,\n      right: 0,\n      bottom: 8,\n      content: \"''\",\n      width: 4,\n      borderTopLeftRadius: 4,\n      borderBottomLeftRadius: 4,\n      backgroundColor: theme.palette.primary.main\n    }\n  },\n  unreadBadge: {\n    position: 'absolute',\n    minWidth: 18,\n    height: 18,\n    top: 4,\n    left: 10,\n    borderRadius: 9,\n    padding: '0 5px',\n    fontSize: 11,\n    textAlign: 'center',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.secondary.main,\n    color: theme.palette.secondary.contrastText,\n    boxShadow: '0 2px 2px 0 rgba(0, 0, 0, 0.35)',\n    zIndex: 10\n  },\n  status: {\n    position: 'absolute',\n    width: 12,\n    height: 12,\n    bottom: 4,\n    left: 44,\n    border: `2px solid ${theme.palette.background.default}`,\n    borderRadius: '50%',\n    zIndex: 10,\n    '&.online': {\n      backgroundColor: '#4CAF50'\n    },\n    '&.do-not-disturb': {\n      backgroundColor: '#F44336'\n    },\n    '&.away': {\n      backgroundColor: '#FFC107'\n    },\n    '&.offline': {\n      backgroundColor: '#646464'\n    }\n  }\n}));\n\nfunction ContactList(props) {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const selectedContactId = useSelector(({\n    chatPanel\n  }) => chatPanel.contacts.selectedContactId);\n  const user = useSelector(({\n    chatPanel\n  }) => chatPanel.user);\n  const classes = useStyles();\n  const contactListScroll = useRef(null);\n\n  const handleContactClick = contactId => {\n    dispatch(openChatPanel());\n    dispatch(getChat({\n      contactId\n    }));\n    scrollToTop();\n  };\n\n  const scrollToTop = () => {\n    contactListScroll.current.scrollTop = 0;\n  };\n\n  const ContactButton = ({\n    contact\n  }) => {\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      title: contact.name,\n      placement: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => handleContactClick(contact.id),\n      className: clsx(classes.contactButton, {\n        active: selectedContactId === contact.id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }\n    }, contact.unread && /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.unreadBadge,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, contact.unread), /*#__PURE__*/React.createElement(\"div\", {\n      className: clsx(contact.status, classes.status),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Avatar, {\n      src: contact.avatar,\n      alt: contact.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }\n    }, !contact.avatar || contact.avatar === '' ? contact.name[0] : '')));\n  };\n\n  return /*#__PURE__*/React.createElement(FuseScrollbars, {\n    className: clsx(classes.root, 'flex flex-shrink-0 flex-col overflow-y-auto py-8'),\n    ref: contactListScroll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 3\n    }\n  }, contacts.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FuseAnimateGroup, {\n    enter: {\n      animation: 'transition.expandIn'\n    },\n    className: \"flex flex-col flex-shrink-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 6\n    }\n  }, user && user.chatList && user.chatList.map(chat => {\n    const contact = contacts.find(_contact => _contact.id === chat.contactId);\n    return /*#__PURE__*/React.createElement(ContactButton, {\n      key: contact.id,\n      contact: contact,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 16\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Divider, {\n    className: \"mx-24 my-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), contacts.map(contact => {\n    const chatContact = user.chatList.find(_chat => _chat.contactId === contact.id);\n    return !chatContact ? /*#__PURE__*/React.createElement(ContactButton, {\n      key: contact.id,\n      contact: contact,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 30\n      }\n    }) : '';\n  }))));\n}\n\nexport default React.memo(ContactList);","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena_desarrollo/src/app/fuse-layouts/shared-components/chatPanel/ContactList.js"],"names":["FuseAnimateGroup","FuseScrollbars","Avatar","Button","Divider","makeStyles","Tooltip","clsx","React","useRef","useDispatch","useSelector","getChat","selectContacts","openChatPanel","useStyles","theme","root","background","palette","paper","contactButton","width","minWidth","flex","position","top","right","bottom","content","borderTopLeftRadius","borderBottomLeftRadius","backgroundColor","primary","main","unreadBadge","height","left","borderRadius","padding","fontSize","textAlign","display","alignItems","justifyContent","secondary","color","contrastText","boxShadow","zIndex","status","border","default","ContactList","props","dispatch","contacts","selectedContactId","chatPanel","user","classes","contactListScroll","handleContactClick","contactId","scrollToTop","current","scrollTop","ContactButton","contact","name","id","active","unread","avatar","length","animation","chatList","map","chat","find","_contact","chatContact","_chat","memo"],"mappings":"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","sourcesContent":["import FuseAnimateGroup from '@fuse/core/FuseAnimateGroup';\nimport FuseScrollbars from '@fuse/core/FuseScrollbars';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getChat } from './store/chatSlice';\nimport { selectContacts } from './store/contactsSlice';\nimport { openChatPanel } from './store/stateSlice';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tbackground: theme.palette.background.paper\n\t},\n\tcontactButton: {\n\t\twidth: 70,\n\t\tminWidth: 70,\n\t\tflex: '0 0 auto',\n\t\t'&.active:after': {\n\t\t\tposition: 'absolute',\n\t\t\ttop: 8,\n\t\t\tright: 0,\n\t\t\tbottom: 8,\n\t\t\tcontent: \"''\",\n\t\t\twidth: 4,\n\t\t\tborderTopLeftRadius: 4,\n\t\t\tborderBottomLeftRadius: 4,\n\t\t\tbackgroundColor: theme.palette.primary.main\n\t\t}\n\t},\n\tunreadBadge: {\n\t\tposition: 'absolute',\n\t\tminWidth: 18,\n\t\theight: 18,\n\t\ttop: 4,\n\t\tleft: 10,\n\t\tborderRadius: 9,\n\t\tpadding: '0 5px',\n\t\tfontSize: 11,\n\t\ttextAlign: 'center',\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tbackgroundColor: theme.palette.secondary.main,\n\t\tcolor: theme.palette.secondary.contrastText,\n\t\tboxShadow: '0 2px 2px 0 rgba(0, 0, 0, 0.35)',\n\t\tzIndex: 10\n\t},\n\tstatus: {\n\t\tposition: 'absolute',\n\t\twidth: 12,\n\t\theight: 12,\n\t\tbottom: 4,\n\t\tleft: 44,\n\t\tborder: `2px solid ${theme.palette.background.default}`,\n\t\tborderRadius: '50%',\n\t\tzIndex: 10,\n\n\t\t'&.online': {\n\t\t\tbackgroundColor: '#4CAF50'\n\t\t},\n\n\t\t'&.do-not-disturb': {\n\t\t\tbackgroundColor: '#F44336'\n\t\t},\n\n\t\t'&.away': {\n\t\t\tbackgroundColor: '#FFC107'\n\t\t},\n\n\t\t'&.offline': {\n\t\t\tbackgroundColor: '#646464'\n\t\t}\n\t}\n}));\n\nfunction ContactList(props) {\n\tconst dispatch = useDispatch();\n\tconst contacts = useSelector(selectContacts);\n\tconst selectedContactId = useSelector(({ chatPanel }) => chatPanel.contacts.selectedContactId);\n\tconst user = useSelector(({ chatPanel }) => chatPanel.user);\n\n\tconst classes = useStyles();\n\tconst contactListScroll = useRef(null);\n\n\tconst handleContactClick = contactId => {\n\t\tdispatch(openChatPanel());\n\t\tdispatch(getChat({ contactId }));\n\t\tscrollToTop();\n\t};\n\n\tconst scrollToTop = () => {\n\t\tcontactListScroll.current.scrollTop = 0;\n\t};\n\n\tconst ContactButton = ({ contact }) => {\n\t\treturn (\n\t\t\t<Tooltip title={contact.name} placement=\"left\">\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => handleContactClick(contact.id)}\n\t\t\t\t\tclassName={clsx(classes.contactButton, { active: selectedContactId === contact.id })}\n\t\t\t\t>\n\t\t\t\t\t{contact.unread && <div className={classes.unreadBadge}>{contact.unread}</div>}\n\t\t\t\t\t<div className={clsx(contact.status, classes.status)} />\n\t\t\t\t\t<Avatar src={contact.avatar} alt={contact.name}>\n\t\t\t\t\t\t{!contact.avatar || contact.avatar === '' ? contact.name[0] : ''}\n\t\t\t\t\t</Avatar>\n\t\t\t\t</Button>\n\t\t\t</Tooltip>\n\t\t);\n\t};\n\n\treturn (\n\t\t<FuseScrollbars\n\t\t\tclassName={clsx(classes.root, 'flex flex-shrink-0 flex-col overflow-y-auto py-8')}\n\t\t\tref={contactListScroll}\n\t\t>\n\t\t\t{contacts.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<FuseAnimateGroup\n\t\t\t\t\t\tenter={{\n\t\t\t\t\t\t\tanimation: 'transition.expandIn'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"flex flex-col flex-shrink-0\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{user &&\n\t\t\t\t\t\t\tuser.chatList &&\n\t\t\t\t\t\t\tuser.chatList.map(chat => {\n\t\t\t\t\t\t\t\tconst contact = contacts.find(_contact => _contact.id === chat.contactId);\n\t\t\t\t\t\t\t\treturn <ContactButton key={contact.id} contact={contact} />;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t<Divider className=\"mx-24 my-8\" />\n\t\t\t\t\t\t{contacts.map(contact => {\n\t\t\t\t\t\t\tconst chatContact = user.chatList.find(_chat => _chat.contactId === contact.id);\n\t\t\t\t\t\t\treturn !chatContact ? <ContactButton key={contact.id} contact={contact} /> : '';\n\t\t\t\t\t\t})}\n\t\t\t\t\t</FuseAnimateGroup>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</FuseScrollbars>\n\t);\n}\n\nexport default React.memo(ContactList);\n"]},"metadata":{},"sourceType":"module"}