{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice'; //import firebaseService from 'app/services/firebaseService';\n\nimport jwtService from 'app/services/jwtService';\nimport { createUserSettingsFirebase, setUserData } from './userSlice';\nexport const submitRegister = ({\n  displayName,\n  password,\n  email\n}) => async dispatch => {\n  return jwtService.createUser({\n    displayName,\n    password,\n    email\n  }).then(user => {\n    dispatch(setUserData(user));\n    return dispatch(registerSuccess());\n  }).catch(error => {\n    return dispatch(registerError(error));\n  });\n};\n/* export const registerWithFirebase = model => async dispatch => {\n\tif (!firebaseService.auth) {\n\t\tconsole.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n\t\treturn () => false;\n\t}\n\tconst { email, password, displayName } = model;\n\n\treturn firebaseService.auth\n\t\t.createUserWithEmailAndPassword(email, password)\n\t\t.then(response => {\n\t\t\tdispatch(\n\t\t\t\tcreateUserSettingsFirebase({\n\t\t\t\t\t...response.user,\n\t\t\t\t\tdisplayName,\n\t\t\t\t\temail\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn dispatch(registerSuccess());\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n\n\t\t\tconst emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n\n\t\t\tconst passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\n\t\t\tconst response = {\n\t\t\t\temail: emailErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\tdisplayName: usernameErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\tpassword: passwordErrorCodes.includes(error.code) ? error.message : null\n\t\t\t};\n\n\t\t\tif (error.code === 'auth/invalid-api-key') {\n\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t}\n\n\t\t\treturn dispatch(registerError(response));\n\t\t});\n}; */\n\nconst initialState = {\n  success: false,\n  error: {\n    username: null,\n    password: null\n  }\n};\nconst registerSlice = createSlice({\n  name: 'auth/register',\n  initialState,\n  reducers: {\n    registerSuccess: (state, action) => {\n      state.success = true;\n    },\n    registerError: (state, action) => {\n      state.success = false;\n      state.error = action.payload;\n    }\n  },\n  extraReducers: {}\n});\nexport const {\n  registerSuccess,\n  registerError\n} = registerSlice.actions;\nexport default registerSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena_desarrollo/src/app/auth/store/registerSlice.js"],"names":["createSlice","showMessage","jwtService","createUserSettingsFirebase","setUserData","submitRegister","displayName","password","email","dispatch","createUser","then","user","registerSuccess","catch","error","registerError","initialState","success","username","registerSlice","name","reducers","state","action","payload","extraReducers","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,6BAA5B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,0BAAT,EAAqCC,WAArC,QAAwD,aAAxD;AAEA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAAsC,MAAMC,QAAN,IAAkB;AACrF,SAAOP,UAAU,CACfQ,UADK,CACM;AACXJ,IAAAA,WADW;AAEXC,IAAAA,QAFW;AAGXC,IAAAA;AAHW,GADN,EAMLG,IANK,CAMAC,IAAI,IAAI;AACbH,IAAAA,QAAQ,CAACL,WAAW,CAACQ,IAAD,CAAZ,CAAR;AACA,WAAOH,QAAQ,CAACI,eAAe,EAAhB,CAAf;AACA,GATK,EAULC,KAVK,CAUCC,KAAK,IAAI;AACf,WAAON,QAAQ,CAACO,aAAa,CAACD,KAAD,CAAd,CAAf;AACA,GAZK,CAAP;AAaA,CAdM;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,KADW;AAEpBH,EAAAA,KAAK,EAAE;AACNI,IAAAA,QAAQ,EAAE,IADJ;AAENZ,IAAAA,QAAQ,EAAE;AAFJ;AAFa,CAArB;AAQA,MAAMa,aAAa,GAAGpB,WAAW,CAAC;AACjCqB,EAAAA,IAAI,EAAE,eAD2B;AAEjCJ,EAAAA,YAFiC;AAGjCK,EAAAA,QAAQ,EAAE;AACTT,IAAAA,eAAe,EAAE,CAACU,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACA,KAHQ;AAITF,IAAAA,aAAa,EAAE,CAACO,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACAK,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACA;AAPQ,GAHuB;AAYjCC,EAAAA,aAAa,EAAE;AAZkB,CAAD,CAAjC;AAeA,OAAO,MAAM;AAAEb,EAAAA,eAAF;AAAmBG,EAAAA;AAAnB,IAAqCI,aAAa,CAACO,OAAzD;AAEP,eAAeP,aAAa,CAACQ,OAA7B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\n//import firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { createUserSettingsFirebase, setUserData } from './userSlice';\n\nexport const submitRegister = ({ displayName, password, email }) => async dispatch => {\n\treturn jwtService\n\t\t.createUser({\n\t\t\tdisplayName,\n\t\t\tpassword,\n\t\t\temail\n\t\t})\n\t\t.then(user => {\n\t\t\tdispatch(setUserData(user));\n\t\t\treturn dispatch(registerSuccess());\n\t\t})\n\t\t.catch(error => {\n\t\t\treturn dispatch(registerError(error));\n\t\t});\n};\n\n/* export const registerWithFirebase = model => async dispatch => {\n\tif (!firebaseService.auth) {\n\t\tconsole.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n\t\treturn () => false;\n\t}\n\tconst { email, password, displayName } = model;\n\n\treturn firebaseService.auth\n\t\t.createUserWithEmailAndPassword(email, password)\n\t\t.then(response => {\n\t\t\tdispatch(\n\t\t\t\tcreateUserSettingsFirebase({\n\t\t\t\t\t...response.user,\n\t\t\t\t\tdisplayName,\n\t\t\t\t\temail\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn dispatch(registerSuccess());\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n\n\t\t\tconst emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n\n\t\t\tconst passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\n\t\t\tconst response = {\n\t\t\t\temail: emailErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\tdisplayName: usernameErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\tpassword: passwordErrorCodes.includes(error.code) ? error.message : null\n\t\t\t};\n\n\t\t\tif (error.code === 'auth/invalid-api-key') {\n\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t}\n\n\t\t\treturn dispatch(registerError(response));\n\t\t});\n}; */\n\nconst initialState = {\n\tsuccess: false,\n\terror: {\n\t\tusername: null,\n\t\tpassword: null\n\t}\n};\n\nconst registerSlice = createSlice({\n\tname: 'auth/register',\n\tinitialState,\n\treducers: {\n\t\tregisterSuccess: (state, action) => {\n\t\t\tstate.success = true;\n\t\t},\n\t\tregisterError: (state, action) => {\n\t\t\tstate.success = false;\n\t\t\tstate.error = action.payload;\n\t\t}\n\t},\n\textraReducers: {}\n});\n\nexport const { registerSuccess, registerError } = registerSlice.actions;\n\nexport default registerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}