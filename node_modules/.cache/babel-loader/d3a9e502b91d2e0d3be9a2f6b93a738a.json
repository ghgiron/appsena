{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyectos_react\\\\Proyecto_sena\\\\src\\\\app\\\\main\\\\apps\\\\contacts\\\\ContactsTable.js\";\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Table from '@material-ui/core/Table';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport { useGlobalFilter, usePagination, useRowSelect, useSortBy, useTable } from 'react-table';\nimport clsx from 'clsx';\nimport ContactsTablePaginationActions from './ContactsTablePaginationActions';\nconst IndeterminateCheckbox = React.forwardRef(({\n  indeterminate,\n  ...rest\n}, ref) => {\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n    ref: resolvedRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }\n  })));\n});\n\nconst EnhancedTable = ({\n  columns,\n  data,\n  onRowClick\n}) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    autoResetPage: true\n  }, useGlobalFilter, useSortBy, usePagination, useRowSelect, hooks => {\n    hooks.allColumns.push(_columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      sortable: false,\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox.  Pagination is a problem since this will select all\n      // rows even though not all rows are on the current page.  The solution should\n      // be server side pagination.  For one, the clients should not download all\n      // rows in most cases.  The client should only download data for the current page.\n      // In that case, getToggleAllRowsSelectedProps works fine.\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(IndeterminateCheckbox, Object.assign({}, getToggleAllRowsSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 8\n        }\n      }))),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(IndeterminateCheckbox, Object.assign({}, row.getToggleRowSelectedProps(), {\n        onClick: ev => ev.stopPropagation(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 8\n        }\n      })))\n    }, ..._columns]);\n  });\n\n  const handleChangePage = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setPageSize(Number(event.target.value));\n  }; // Render the UI for your table\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col min-h-full sm:border-1 sm:rounded-16 overflow-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: \"flex flex-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Table, Object.assign({}, getTableProps(), {\n    stickyHeader: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 6\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(TableRow, Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 8\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(TableCell, Object.assign({\n    className: \"whitespace-no-wrap p-4 md:p-12\"\n  }, !column.sortable ? column.getHeaderProps() : column.getHeaderProps(column.getSortByToggleProps()), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 10\n    }\n  }), column.render('Header'), column.sortable ? /*#__PURE__*/React.createElement(TableSortLabel, {\n    active: column.isSorted // react-table has a unsorted state which is not treated here\n    ,\n    direction: column.isSortedDesc ? 'desc' : 'asc',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }\n  }) : null))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 6\n    }\n  }, page.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(TableRow, Object.assign({}, row.getRowProps(), {\n      onClick: ev => onRowClick(ev, row),\n      className: \"truncate cursor-pointer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(TableCell, Object.assign({}, cell.getCellProps(), {\n        className: clsx('p-4 md:p-12', cell.column.className),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 12\n        }\n      }), cell.render('Cell'));\n    }));\n  })))), /*#__PURE__*/React.createElement(TablePagination, {\n    component: \"div\",\n    classes: {\n      root: 'flex-shrink-0 border-t-1'\n    },\n    rowsPerPageOptions: [5, 10, 25, {\n      label: 'All',\n      value: data.length + 1\n    }],\n    colSpan: 5,\n    count: data.length,\n    rowsPerPage: pageSize,\n    page: pageIndex,\n    SelectProps: {\n      inputProps: {\n        'aria-label': 'rows per page'\n      },\n      native: false\n    },\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    ActionsComponent: ContactsTablePaginationActions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 4\n    }\n  }));\n};\n\nEnhancedTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  onRowClick: PropTypes.func\n};\nexport default EnhancedTable;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/contacts/ContactsTable.js"],"names":["React","Checkbox","Table","PropTypes","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","TableSortLabel","useGlobalFilter","usePagination","useRowSelect","useSortBy","useTable","clsx","ContactsTablePaginationActions","IndeterminateCheckbox","forwardRef","indeterminate","rest","ref","defaultRef","useRef","resolvedRef","useEffect","current","EnhancedTable","columns","data","onRowClick","getTableProps","headerGroups","prepareRow","page","gotoPage","setPageSize","state","pageIndex","pageSize","autoResetPage","hooks","allColumns","push","_columns","id","sortable","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","ev","stopPropagation","handleChangePage","event","newPage","handleChangeRowsPerPage","Number","target","value","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","i","getRowProps","cells","cell","getCellProps","className","root","label","length","inputProps","native","propTypes","array","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Table from '@material-ui/core/Table';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport { useGlobalFilter, usePagination, useRowSelect, useSortBy, useTable } from 'react-table';\nimport clsx from 'clsx';\nimport ContactsTablePaginationActions from './ContactsTablePaginationActions';\n\nconst IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\n\tconst defaultRef = React.useRef();\n\tconst resolvedRef = ref || defaultRef;\n\n\tReact.useEffect(() => {\n\t\tresolvedRef.current.indeterminate = indeterminate;\n\t}, [resolvedRef, indeterminate]);\n\n\treturn (\n\t\t<>\n\t\t\t<Checkbox ref={resolvedRef} {...rest} />\n\t\t</>\n\t);\n});\n\nconst EnhancedTable = ({ columns, data, onRowClick }) => {\n\tconst {\n\t\tgetTableProps,\n\t\theaderGroups,\n\t\tprepareRow,\n\t\tpage,\n\t\tgotoPage,\n\t\tsetPageSize,\n\t\tstate: { pageIndex, pageSize }\n\t} = useTable(\n\t\t{\n\t\t\tcolumns,\n\t\t\tdata,\n\t\t\tautoResetPage: true\n\t\t},\n\t\tuseGlobalFilter,\n\t\tuseSortBy,\n\t\tusePagination,\n\t\tuseRowSelect,\n\t\thooks => {\n\t\t\thooks.allColumns.push(_columns => [\n\t\t\t\t// Let's make a column for selection\n\t\t\t\t{\n\t\t\t\t\tid: 'selection',\n\t\t\t\t\tsortable: false,\n\t\t\t\t\t// The header can use the table's getToggleAllRowsSelectedProps method\n\t\t\t\t\t// to render a checkbox.  Pagination is a problem since this will select all\n\t\t\t\t\t// rows even though not all rows are on the current page.  The solution should\n\t\t\t\t\t// be server side pagination.  For one, the clients should not download all\n\t\t\t\t\t// rows in most cases.  The client should only download data for the current page.\n\t\t\t\t\t// In that case, getToggleAllRowsSelectedProps works fine.\n\t\t\t\t\tHeader: ({ getToggleAllRowsSelectedProps }) => (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t),\n\t\t\t\t\t// The cell can use the individual row's getToggleRowSelectedProps method\n\t\t\t\t\t// to the render a checkbox\n\t\t\t\t\tCell: ({ row }) => (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<IndeterminateCheckbox\n\t\t\t\t\t\t\t\t{...row.getToggleRowSelectedProps()}\n\t\t\t\t\t\t\t\tonClick={ev => ev.stopPropagation()}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t..._columns\n\t\t\t]);\n\t\t}\n\t);\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tgotoPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = event => {\n\t\tsetPageSize(Number(event.target.value));\n\t};\n\n\t// Render the UI for your table\n\treturn (\n\t\t<div className=\"flex flex-col min-h-full sm:border-1 sm:rounded-16 overflow-hidden\">\n\t\t\t<TableContainer className=\"flex flex-1\">\n\t\t\t\t<Table {...getTableProps()} stickyHeader>\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t{headerGroups.map(headerGroup => (\n\t\t\t\t\t\t\t<TableRow {...headerGroup.getHeaderGroupProps()}>\n\t\t\t\t\t\t\t\t{headerGroup.headers.map(column => (\n\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\tclassName=\"whitespace-no-wrap p-4 md:p-12\"\n\t\t\t\t\t\t\t\t\t\t{...(!column.sortable\n\t\t\t\t\t\t\t\t\t\t\t? column.getHeaderProps()\n\t\t\t\t\t\t\t\t\t\t\t: column.getHeaderProps(column.getSortByToggleProps()))}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{column.render('Header')}\n\t\t\t\t\t\t\t\t\t\t{column.sortable ? (\n\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\n\t\t\t\t\t\t\t\t\t\t\t\tactive={column.isSorted}\n\t\t\t\t\t\t\t\t\t\t\t\t// react-table has a unsorted state which is not treated here\n\t\t\t\t\t\t\t\t\t\t\t\tdirection={column.isSortedDesc ? 'desc' : 'asc'}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{page.map((row, i) => {\n\t\t\t\t\t\t\tprepareRow(row);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t{...row.getRowProps()}\n\t\t\t\t\t\t\t\t\tonClick={ev => onRowClick(ev, row)}\n\t\t\t\t\t\t\t\t\tclassName=\"truncate cursor-pointer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{row.cells.map(cell => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t{...cell.getCellProps()}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={clsx('p-4 md:p-12', cell.column.className)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{cell.render('Cell')}\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t<TablePagination\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tclasses={{\n\t\t\t\t\troot: 'flex-shrink-0 border-t-1'\n\t\t\t\t}}\n\t\t\t\trowsPerPageOptions={[5, 10, 25, { label: 'All', value: data.length + 1 }]}\n\t\t\t\tcolSpan={5}\n\t\t\t\tcount={data.length}\n\t\t\t\trowsPerPage={pageSize}\n\t\t\t\tpage={pageIndex}\n\t\t\t\tSelectProps={{\n\t\t\t\t\tinputProps: { 'aria-label': 'rows per page' },\n\t\t\t\t\tnative: false\n\t\t\t\t}}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={ContactsTablePaginationActions}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nEnhancedTable.propTypes = {\n\tcolumns: PropTypes.array.isRequired,\n\tdata: PropTypes.array.isRequired,\n\tonRowClick: PropTypes.func\n};\n\nexport default EnhancedTable;\n"]},"metadata":{},"sourceType":"module"}