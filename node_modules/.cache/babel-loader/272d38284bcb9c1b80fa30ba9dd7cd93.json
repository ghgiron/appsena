{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyectos_react\\\\Proyecto_sena_old\\\\src\\\\@fuse\\\\core\\\\FuseHighlight\\\\FuseHighlight.js\";\nimport * as Prism from 'prismjs';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport './prism-languages';\n\nfunction FuseHighlight(props) {\n  const domNode = useRef(null);\n  const source = useRef(trimCode());\n  useEffect(() => {\n    function highlight() {\n      Prism.highlightElement(domNode.current, props.async);\n    }\n\n    highlight();\n  }, [props.async]);\n\n  function trimCode() {\n    let sourceString = props.children;\n\n    if (typeof sourceString === 'object' && sourceString.default) {\n      sourceString = sourceString.default;\n    } // Split the source into lines\n\n\n    const sourceLines = sourceString.split('\\n'); // Remove the first and the last line of the source\n    // code if they are blank lines. This way, the html\n    // can be formatted properly while using fuse-highlight\n    // component\n\n    if (!sourceLines[0].trim()) {\n      sourceLines.shift();\n    }\n\n    if (!sourceLines[sourceLines.length - 1].trim()) {\n      sourceLines.pop();\n    } // Find the first non-whitespace char index in\n    // the first line of the source code\n\n\n    const indexOfFirstChar = sourceLines[0].search(/\\S|$/); // Generate the trimmed source\n\n    let sourceRaw = ''; // Iterate through all the lines\n\n    sourceLines.forEach((line, index) => {\n      // Trim the beginning white space depending on the index\n      // and concat the source code\n      sourceRaw += line.substr(indexOfFirstChar, line.length); // If it's not the last line...\n\n      if (index !== sourceLines.length - 1) {\n        // Add a line break at the end\n        sourceRaw = `${sourceRaw}\\n`;\n      }\n    });\n    return sourceRaw;\n  }\n\n  const {\n    className,\n    component: Wrapper\n  } = props;\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    ref: domNode,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 3\n    }\n  }, source.current);\n}\n\nFuseHighlight.propTypes = {\n  component: PropTypes.node\n};\nFuseHighlight.defaultProps = {\n  component: 'code'\n};\nexport default React.memo(FuseHighlight);","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena_old/src/@fuse/core/FuseHighlight/FuseHighlight.js"],"names":["Prism","PropTypes","React","useEffect","useRef","FuseHighlight","props","domNode","source","trimCode","highlight","highlightElement","current","async","sourceString","children","default","sourceLines","split","trim","shift","length","pop","indexOfFirstChar","search","sourceRaw","forEach","line","index","substr","className","component","Wrapper","propTypes","node","defaultProps","memo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,mBAAP;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC7B,QAAMC,OAAO,GAAGH,MAAM,CAAC,IAAD,CAAtB;AACA,QAAMI,MAAM,GAAGJ,MAAM,CAACK,QAAQ,EAAT,CAArB;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACf,aAASO,SAAT,GAAqB;AACpBV,MAAAA,KAAK,CAACW,gBAAN,CAAuBJ,OAAO,CAACK,OAA/B,EAAwCN,KAAK,CAACO,KAA9C;AACA;;AAEDH,IAAAA,SAAS;AACT,GANQ,EAMN,CAACJ,KAAK,CAACO,KAAP,CANM,CAAT;;AAQA,WAASJ,QAAT,GAAoB;AACnB,QAAIK,YAAY,GAAGR,KAAK,CAACS,QAAzB;;AAEA,QAAI,OAAOD,YAAP,KAAwB,QAAxB,IAAoCA,YAAY,CAACE,OAArD,EAA8D;AAC7DF,MAAAA,YAAY,GAAGA,YAAY,CAACE,OAA5B;AACA,KALkB,CAOnB;;;AACA,UAAMC,WAAW,GAAGH,YAAY,CAACI,KAAb,CAAmB,IAAnB,CAApB,CARmB,CAUnB;AACA;AACA;AACA;;AACA,QAAI,CAACD,WAAW,CAAC,CAAD,CAAX,CAAeE,IAAf,EAAL,EAA4B;AAC3BF,MAAAA,WAAW,CAACG,KAAZ;AACA;;AAED,QAAI,CAACH,WAAW,CAACA,WAAW,CAACI,MAAZ,GAAqB,CAAtB,CAAX,CAAoCF,IAApC,EAAL,EAAiD;AAChDF,MAAAA,WAAW,CAACK,GAAZ;AACA,KApBkB,CAsBnB;AACA;;;AACA,UAAMC,gBAAgB,GAAGN,WAAW,CAAC,CAAD,CAAX,CAAeO,MAAf,CAAsB,MAAtB,CAAzB,CAxBmB,CA0BnB;;AACA,QAAIC,SAAS,GAAG,EAAhB,CA3BmB,CA6BnB;;AACAR,IAAAA,WAAW,CAACS,OAAZ,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC;AACA;AACAH,MAAAA,SAAS,IAAIE,IAAI,CAACE,MAAL,CAAYN,gBAAZ,EAA8BI,IAAI,CAACN,MAAnC,CAAb,CAHoC,CAKpC;;AACA,UAAIO,KAAK,KAAKX,WAAW,CAACI,MAAZ,GAAqB,CAAnC,EAAsC;AACrC;AACAI,QAAAA,SAAS,GAAI,GAAEA,SAAU,IAAzB;AACA;AACD,KAVD;AAWA,WAAOA,SAAP;AACA;;AAED,QAAM;AAAEK,IAAAA,SAAF;AAAaC,IAAAA,SAAS,EAAEC;AAAxB,MAAoC1B,KAA1C;AAEA,sBACC,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEC,OAAd;AAAuB,IAAA,SAAS,EAAEuB,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEtB,MAAM,CAACI,OADT,CADD;AAKA;;AAEDP,aAAa,CAAC4B,SAAd,GAA0B;AACzBF,EAAAA,SAAS,EAAE9B,SAAS,CAACiC;AADI,CAA1B;AAGA7B,aAAa,CAAC8B,YAAd,GAA6B;AAC5BJ,EAAAA,SAAS,EAAE;AADiB,CAA7B;AAIA,eAAe7B,KAAK,CAACkC,IAAN,CAAW/B,aAAX,CAAf","sourcesContent":["import * as Prism from 'prismjs';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport './prism-languages';\n\nfunction FuseHighlight(props) {\n\tconst domNode = useRef(null);\n\tconst source = useRef(trimCode());\n\n\tuseEffect(() => {\n\t\tfunction highlight() {\n\t\t\tPrism.highlightElement(domNode.current, props.async);\n\t\t}\n\n\t\thighlight();\n\t}, [props.async]);\n\n\tfunction trimCode() {\n\t\tlet sourceString = props.children;\n\n\t\tif (typeof sourceString === 'object' && sourceString.default) {\n\t\t\tsourceString = sourceString.default;\n\t\t}\n\n\t\t// Split the source into lines\n\t\tconst sourceLines = sourceString.split('\\n');\n\n\t\t// Remove the first and the last line of the source\n\t\t// code if they are blank lines. This way, the html\n\t\t// can be formatted properly while using fuse-highlight\n\t\t// component\n\t\tif (!sourceLines[0].trim()) {\n\t\t\tsourceLines.shift();\n\t\t}\n\n\t\tif (!sourceLines[sourceLines.length - 1].trim()) {\n\t\t\tsourceLines.pop();\n\t\t}\n\n\t\t// Find the first non-whitespace char index in\n\t\t// the first line of the source code\n\t\tconst indexOfFirstChar = sourceLines[0].search(/\\S|$/);\n\n\t\t// Generate the trimmed source\n\t\tlet sourceRaw = '';\n\n\t\t// Iterate through all the lines\n\t\tsourceLines.forEach((line, index) => {\n\t\t\t// Trim the beginning white space depending on the index\n\t\t\t// and concat the source code\n\t\t\tsourceRaw += line.substr(indexOfFirstChar, line.length);\n\n\t\t\t// If it's not the last line...\n\t\t\tif (index !== sourceLines.length - 1) {\n\t\t\t\t// Add a line break at the end\n\t\t\t\tsourceRaw = `${sourceRaw}\\n`;\n\t\t\t}\n\t\t});\n\t\treturn sourceRaw;\n\t}\n\n\tconst { className, component: Wrapper } = props;\n\n\treturn (\n\t\t<Wrapper ref={domNode} className={className}>\n\t\t\t{source.current}\n\t\t</Wrapper>\n\t);\n}\n\nFuseHighlight.propTypes = {\n\tcomponent: PropTypes.node\n};\nFuseHighlight.defaultProps = {\n\tcomponent: 'code'\n};\n\nexport default React.memo(FuseHighlight);\n"]},"metadata":{},"sourceType":"module"}