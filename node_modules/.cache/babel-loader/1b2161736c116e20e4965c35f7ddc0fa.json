{"ast":null,"code":"import _ from '@lodash'; // a little function to help us with reordering the result\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport default reorder;\nexport const reorderQuoteMap = (lists, source, destination) => {\n  const current = _.find(lists, {\n    id: source.droppableId\n  });\n\n  const next = _.find(lists, {\n    id: destination.droppableId\n  });\n\n  const target = current.idCards[source.index]; // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current.idCards, source.index, destination.index);\n    return lists.map(list => {\n      if (list.id === source.droppableId) {\n        list.idCards = reordered;\n      }\n\n      return list;\n    });\n  } // moving to different list\n  // remove from original\n\n\n  current.idCards.splice(source.index, 1); // insert into next\n\n  next.idCards.splice(destination.index, 0, target);\n  return lists.map(list => {\n    if (list.id === source.droppableId) {\n      return current;\n    }\n\n    if (list.id === destination.droppableId) {\n      return next;\n    }\n\n    return list;\n  });\n};","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/scrumboard/store/reorder.js"],"names":["_","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","reorderQuoteMap","lists","source","destination","current","find","id","droppableId","next","target","idCards","index","reordered","map"],"mappings":"AAAA,OAAOA,CAAP,MAAc,SAAd,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC/C,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;AACA,QAAM,CAACM,OAAD,IAAYH,MAAM,CAACI,MAAP,CAAcN,UAAd,EAA0B,CAA1B,CAAlB;AACAE,EAAAA,MAAM,CAACI,MAAP,CAAcL,QAAd,EAAwB,CAAxB,EAA2BI,OAA3B;AAEA,SAAOH,MAAP;AACA,CAND;;AAQA,eAAeJ,OAAf;AAEA,OAAO,MAAMS,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,WAAhB,KAAgC;AAC9D,QAAMC,OAAO,GAAGd,CAAC,CAACe,IAAF,CAAOJ,KAAP,EAAc;AAAEK,IAAAA,EAAE,EAAEJ,MAAM,CAACK;AAAb,GAAd,CAAhB;;AACA,QAAMC,IAAI,GAAGlB,CAAC,CAACe,IAAF,CAAOJ,KAAP,EAAc;AAAEK,IAAAA,EAAE,EAAEH,WAAW,CAACI;AAAlB,GAAd,CAAb;;AACA,QAAME,MAAM,GAAGL,OAAO,CAACM,OAAR,CAAgBR,MAAM,CAACS,KAAvB,CAAf,CAH8D,CAK9D;;AACA,MAAIT,MAAM,CAACK,WAAP,KAAuBJ,WAAW,CAACI,WAAvC,EAAoD;AACnD,UAAMK,SAAS,GAAGrB,OAAO,CAACa,OAAO,CAACM,OAAT,EAAkBR,MAAM,CAACS,KAAzB,EAAgCR,WAAW,CAACQ,KAA5C,CAAzB;AACA,WAAOV,KAAK,CAACY,GAAN,CAAUrB,IAAI,IAAI;AACxB,UAAIA,IAAI,CAACc,EAAL,KAAYJ,MAAM,CAACK,WAAvB,EAAoC;AACnCf,QAAAA,IAAI,CAACkB,OAAL,GAAeE,SAAf;AACA;;AACD,aAAOpB,IAAP;AACA,KALM,CAAP;AAMA,GAd6D,CAgB9D;AAEA;;;AACAY,EAAAA,OAAO,CAACM,OAAR,CAAgBX,MAAhB,CAAuBG,MAAM,CAACS,KAA9B,EAAqC,CAArC,EAnB8D,CAoB9D;;AACAH,EAAAA,IAAI,CAACE,OAAL,CAAaX,MAAb,CAAoBI,WAAW,CAACQ,KAAhC,EAAuC,CAAvC,EAA0CF,MAA1C;AAEA,SAAOR,KAAK,CAACY,GAAN,CAAUrB,IAAI,IAAI;AACxB,QAAIA,IAAI,CAACc,EAAL,KAAYJ,MAAM,CAACK,WAAvB,EAAoC;AACnC,aAAOH,OAAP;AACA;;AACD,QAAIZ,IAAI,CAACc,EAAL,KAAYH,WAAW,CAACI,WAA5B,EAAyC;AACxC,aAAOC,IAAP;AACA;;AACD,WAAOhB,IAAP;AACA,GARM,CAAP;AASA,CAhCM","sourcesContent":["import _ from '@lodash';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n\tconst result = Array.from(list);\n\tconst [removed] = result.splice(startIndex, 1);\n\tresult.splice(endIndex, 0, removed);\n\n\treturn result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap = (lists, source, destination) => {\n\tconst current = _.find(lists, { id: source.droppableId });\n\tconst next = _.find(lists, { id: destination.droppableId });\n\tconst target = current.idCards[source.index];\n\n\t// moving to same list\n\tif (source.droppableId === destination.droppableId) {\n\t\tconst reordered = reorder(current.idCards, source.index, destination.index);\n\t\treturn lists.map(list => {\n\t\t\tif (list.id === source.droppableId) {\n\t\t\t\tlist.idCards = reordered;\n\t\t\t}\n\t\t\treturn list;\n\t\t});\n\t}\n\n\t// moving to different list\n\n\t// remove from original\n\tcurrent.idCards.splice(source.index, 1);\n\t// insert into next\n\tnext.idCards.splice(destination.index, 0, target);\n\n\treturn lists.map(list => {\n\t\tif (list.id === source.droppableId) {\n\t\t\treturn current;\n\t\t}\n\t\tif (list.id === destination.droppableId) {\n\t\t\treturn next;\n\t\t}\n\t\treturn list;\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}