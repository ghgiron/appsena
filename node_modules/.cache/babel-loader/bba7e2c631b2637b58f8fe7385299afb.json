{"ast":null,"code":"import { createEntityAdapter, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { closeChatPanel } from './stateSlice';\nexport const getContacts = createAsyncThunk('chatPanel/contacts/getContacts', async params => {\n  const response = await axios.get('/api/chat/contacts', {\n    params\n  });\n  const data = await response.data;\n  return data;\n});\nconst contactsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectContacts,\n  selectById: selectContactById\n} = contactsAdapter.getSelectors(state => state.chatPanel.contacts);\nconst contactsSlice = createSlice({\n  name: 'chatPanel/contacts',\n  initialState: contactsAdapter.getInitialState({\n    selectedContactId: null\n  }),\n  reducers: {\n    setSelectedContactId: (state, action) => {\n      state.selectedContactId = action.payload;\n    },\n    removeSelectedContactId: (state, action) => (state, action) => {\n      state.selectedContactId = null;\n    }\n  },\n  extraReducers: {\n    [getContacts.fulfilled]: contactsAdapter.setAll,\n    [closeChatPanel]: (state, action) => {\n      state.selectedContactId = null;\n    }\n  }\n});\nexport const {\n  setSelectedContactId,\n  removeSelectedContactId\n} = contactsSlice.actions;\nexport default contactsSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/fuse-layouts/shared-components/chatPanel/store/contactsSlice.js"],"names":["createEntityAdapter","createSlice","createAsyncThunk","axios","closeChatPanel","getContacts","params","response","get","data","contactsAdapter","selectAll","selectContacts","selectById","selectContactById","getSelectors","state","chatPanel","contacts","contactsSlice","name","initialState","getInitialState","selectedContactId","reducers","setSelectedContactId","action","payload","removeSelectedContactId","extraReducers","fulfilled","setAll","actions","reducer"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,EAA2CC,gBAA3C,QAAmE,kBAAnE;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CAAC,gCAAD,EAAmC,MAAMI,MAAN,IAAgB;AAC7F,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,oBAAV,EAAgC;AAAEF,IAAAA;AAAF,GAAhC,CAAvB;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AAEA,SAAOA,IAAP;AACA,CAL0C,CAApC;AAOP,MAAMC,eAAe,GAAGV,mBAAmB,CAAC,EAAD,CAA3C;AAEA,OAAO,MAAM;AAAEW,EAAAA,SAAS,EAAEC,cAAb;AAA6BC,EAAAA,UAAU,EAAEC;AAAzC,IAA+DJ,eAAe,CAACK,YAAhB,CAC3EC,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,QADkD,CAArE;AAIP,MAAMC,aAAa,GAAGlB,WAAW,CAAC;AACjCmB,EAAAA,IAAI,EAAE,oBAD2B;AAEjCC,EAAAA,YAAY,EAAEX,eAAe,CAACY,eAAhB,CAAgC;AAC7CC,IAAAA,iBAAiB,EAAE;AAD0B,GAAhC,CAFmB;AAKjCC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,oBAAoB,EAAE,CAACT,KAAD,EAAQU,MAAR,KAAmB;AACxCV,MAAAA,KAAK,CAACO,iBAAN,GAA0BG,MAAM,CAACC,OAAjC;AACA,KAHQ;AAITC,IAAAA,uBAAuB,EAAE,CAACZ,KAAD,EAAQU,MAAR,KAAmB,CAACV,KAAD,EAAQU,MAAR,KAAmB;AAC9DV,MAAAA,KAAK,CAACO,iBAAN,GAA0B,IAA1B;AACA;AANQ,GALuB;AAajCM,EAAAA,aAAa,EAAE;AACd,KAACxB,WAAW,CAACyB,SAAb,GAAyBpB,eAAe,CAACqB,MAD3B;AAEd,KAAC3B,cAAD,GAAkB,CAACY,KAAD,EAAQU,MAAR,KAAmB;AACpCV,MAAAA,KAAK,CAACO,iBAAN,GAA0B,IAA1B;AACA;AAJa;AAbkB,CAAD,CAAjC;AAqBA,OAAO,MAAM;AAAEE,EAAAA,oBAAF;AAAwBG,EAAAA;AAAxB,IAAoDT,aAAa,CAACa,OAAxE;AAEP,eAAeb,aAAa,CAACc,OAA7B","sourcesContent":["import { createEntityAdapter, createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport axios from 'axios';\nimport { closeChatPanel } from './stateSlice';\n\nexport const getContacts = createAsyncThunk('chatPanel/contacts/getContacts', async params => {\n\tconst response = await axios.get('/api/chat/contacts', { params });\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nconst contactsAdapter = createEntityAdapter({});\n\nexport const { selectAll: selectContacts, selectById: selectContactById } = contactsAdapter.getSelectors(\n\tstate => state.chatPanel.contacts\n);\n\nconst contactsSlice = createSlice({\n\tname: 'chatPanel/contacts',\n\tinitialState: contactsAdapter.getInitialState({\n\t\tselectedContactId: null\n\t}),\n\treducers: {\n\t\tsetSelectedContactId: (state, action) => {\n\t\t\tstate.selectedContactId = action.payload;\n\t\t},\n\t\tremoveSelectedContactId: (state, action) => (state, action) => {\n\t\t\tstate.selectedContactId = null;\n\t\t}\n\t},\n\textraReducers: {\n\t\t[getContacts.fulfilled]: contactsAdapter.setAll,\n\t\t[closeChatPanel]: (state, action) => {\n\t\t\tstate.selectedContactId = null;\n\t\t}\n\t}\n});\n\nexport const { setSelectedContactId, removeSelectedContactId } = contactsSlice.actions;\n\nexport default contactsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}