{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport _ from '@lodash';\nimport jwt from 'jsonwebtoken';\nimport mock from '../mock';\n/* eslint-disable camelcase */\n\nconst jwtConfig = {\n  secret: 'some-secret-code-goes-here',\n  expiresIn: '2 days' // A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc)\n\n};\nconst authDB = {\n  users: [{\n    uuid: 'XgbuVEXBU5gtSKdbQRP1Zbbby1i1',\n    from: 'custom-db',\n    password: 'admin',\n    role: 'admin',\n    data: {\n      displayName: 'Abbott Keitch',\n      photoURL: 'assets/images/avatars/Abbott.jpg',\n      email: 'admin',\n      settings: {\n        layout: {\n          style: 'layout1',\n          config: {\n            scroll: 'content',\n            navbar: {\n              display: true,\n              folded: true,\n              position: 'left'\n            },\n            toolbar: {\n              display: true,\n              style: 'fixed',\n              position: 'below'\n            },\n            footer: {\n              display: true,\n              style: 'fixed',\n              position: 'below'\n            },\n            mode: 'fullwidth'\n          }\n        },\n        customScrollbars: true,\n        theme: {\n          main: 'defaultDark',\n          navbar: 'defaultDark',\n          toolbar: 'defaultDark',\n          footer: 'defaultDark'\n        }\n      },\n      shortcuts: ['calendar', 'mail', 'contacts']\n    }\n  }, {\n    uuid: 'XgbuVEXBU6gtSKdbTYR1Zbbby1i3',\n    from: 'custom-db',\n    password: 'staff',\n    role: 'staff',\n    data: {\n      displayName: 'Arnold Matlock111',\n      photoURL: 'assets/images/avatars/Arnold.jpg',\n      email: 'staff',\n      settings: {\n        layout: {\n          style: 'layout2',\n          config: {\n            mode: 'boxed',\n            scroll: 'content',\n            navbar: {\n              display: true\n            },\n            toolbar: {\n              display: true,\n              position: 'below'\n            },\n            footer: {\n              display: true,\n              style: 'fixed'\n            }\n          }\n        },\n        customScrollbars: true,\n        theme: {\n          main: 'greeny',\n          navbar: 'mainThemeDark',\n          toolbar: 'mainThemeDark',\n          footer: 'mainThemeDark'\n        }\n      },\n      shortcuts: ['calendar', 'mail', 'contacts', 'todo']\n    }\n  }]\n};\nmock.onGet('/api/auth').reply(config => {\n  const data = JSON.parse(config.data);\n  const {\n    email,\n    password\n  } = data;\n\n  const user = _.cloneDeep(authDB.users.find(_user => _user.data.email === email));\n\n  const error = {\n    email: user ? null : 'Check your username/email',\n    password: user && user.password === password ? null : 'Check your password'\n  };\n\n  if (!error.email && !error.password && !error.displayName) {\n    delete user.password;\n    const access_token = jwt.sign({\n      id: user.uuid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    const response = {\n      user,\n      access_token\n    };\n    return [200, response];\n  }\n\n  return [200, {\n    error\n  }];\n});\nmock.onGet('/api/auth/access-token').reply(config => {\n  const data = JSON.parse(config.data);\n  const {\n    access_token\n  } = data;\n\n  try {\n    const {\n      id\n    } = jwt.verify(access_token, jwtConfig.secret);\n\n    const user = _.cloneDeep(authDB.users.find(_user => _user.uuid === id));\n\n    delete user.password;\n    const updatedAccessToken = jwt.sign({\n      id: user.uuid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    const response = {\n      user,\n      access_token: updatedAccessToken\n    };\n    return [200, response];\n  } catch (e) {\n    const error = 'Invalid access token detected';\n    return [401, {\n      error\n    }];\n  }\n});\nmock.onPost('/api/auth/register').reply(request => {\n  const data = JSON.parse(request.data);\n  const {\n    displayName,\n    password,\n    email\n  } = data;\n  const isEmailExists = authDB.users.find(_user => _user.data.email === email);\n  const error = {\n    email: isEmailExists ? 'The email is already in use' : null,\n    displayName: displayName !== '' ? null : 'Enter display name',\n    password: null\n  };\n\n  if (!error.displayName && !error.password && !error.email) {\n    const newUser = {\n      uuid: FuseUtils.generateGUID(),\n      from: 'custom-db',\n      password,\n      role: 'admin',\n      data: {\n        displayName,\n        photoURL: 'assets/images/avatars/Abbott.jpg',\n        email,\n        settings: {},\n        shortcuts: []\n      }\n    };\n    authDB.users = [...authDB.users, newUser];\n\n    const user = _.cloneDeep(newUser);\n\n    delete user.password;\n    const access_token = jwt.sign({\n      id: user.uuid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    const response = {\n      user,\n      access_token\n    };\n    return [200, response];\n  }\n\n  return [200, {\n    error\n  }];\n});\nmock.onPost('/api/auth/user/update').reply(config => {\n  const data = JSON.parse(config.data);\n  const {\n    user\n  } = data;\n  authDB.users = authDB.users.map(_user => {\n    if (user.uuid === user.id) {\n      return _.merge(_user, user);\n    }\n\n    return _user;\n  });\n  return [200, user];\n});","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/@fake-db/db/auth-db.js"],"names":["FuseUtils","_","jwt","mock","jwtConfig","secret","expiresIn","authDB","users","uuid","from","password","role","data","displayName","photoURL","email","settings","layout","style","config","scroll","navbar","display","folded","position","toolbar","footer","mode","customScrollbars","theme","main","shortcuts","onGet","reply","JSON","parse","user","cloneDeep","find","_user","error","access_token","sign","id","response","verify","updatedAccessToken","e","onPost","request","isEmailExists","newUser","generateGUID","map","merge"],"mappings":"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","sourcesContent":["import FuseUtils from '@fuse/utils';\nimport _ from '@lodash';\nimport jwt from 'jsonwebtoken';\nimport mock from '../mock';\n/* eslint-disable camelcase */\n\nconst jwtConfig = {\n\tsecret: 'some-secret-code-goes-here',\n\texpiresIn: '2 days' // A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc)\n};\n\nconst authDB = {\n\tusers: [\n\t\t{\n\t\t\tuuid: 'XgbuVEXBU5gtSKdbQRP1Zbbby1i1',\n\t\t\tfrom: 'custom-db',\n\t\t\tpassword: 'admin',\n\t\t\trole: 'admin',\n\t\t\tdata: {\n\t\t\t\tdisplayName: 'Abbott Keitch',\n\t\t\t\tphotoURL: 'assets/images/avatars/Abbott.jpg',\n\t\t\t\temail: 'admin',\n\t\t\t\tsettings: {\n\t\t\t\t\tlayout: {\n\t\t\t\t\t\tstyle: 'layout1',\n\t\t\t\t\t\tconfig: {\n\t\t\t\t\t\t\tscroll: 'content',\n\t\t\t\t\t\t\tnavbar: {\n\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\tfolded: true,\n\t\t\t\t\t\t\t\tposition: 'left'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\tstyle: 'fixed',\n\t\t\t\t\t\t\t\tposition: 'below'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfooter: {\n\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\tstyle: 'fixed',\n\t\t\t\t\t\t\t\tposition: 'below'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmode: 'fullwidth'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tcustomScrollbars: true,\n\t\t\t\t\ttheme: {\n\t\t\t\t\t\tmain: 'defaultDark',\n\t\t\t\t\t\tnavbar: 'defaultDark',\n\t\t\t\t\t\ttoolbar: 'defaultDark',\n\t\t\t\t\t\tfooter: 'defaultDark'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tshortcuts: ['calendar', 'mail', 'contacts']\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tuuid: 'XgbuVEXBU6gtSKdbTYR1Zbbby1i3',\n\t\t\tfrom: 'custom-db',\n\t\t\tpassword: 'staff',\n\t\t\trole: 'staff',\n\t\t\tdata: {\n\t\t\t\tdisplayName: 'Arnold Matlock111',\n\t\t\t\tphotoURL: 'assets/images/avatars/Arnold.jpg',\n\t\t\t\temail: 'staff',\n\t\t\t\tsettings: {\n\t\t\t\t\tlayout: {\n\t\t\t\t\t\tstyle: 'layout2',\n\t\t\t\t\t\tconfig: {\n\t\t\t\t\t\t\tmode: 'boxed',\n\t\t\t\t\t\t\tscroll: 'content',\n\t\t\t\t\t\t\tnavbar: {\n\t\t\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\tposition: 'below'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfooter: {\n\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\tstyle: 'fixed'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tcustomScrollbars: true,\n\t\t\t\t\ttheme: {\n\t\t\t\t\t\tmain: 'greeny',\n\t\t\t\t\t\tnavbar: 'mainThemeDark',\n\t\t\t\t\t\ttoolbar: 'mainThemeDark',\n\t\t\t\t\t\tfooter: 'mainThemeDark'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tshortcuts: ['calendar', 'mail', 'contacts', 'todo']\n\t\t\t}\n\t\t}\n\t]\n};\n\nmock.onGet('/api/auth').reply(config => {\n\tconst data = JSON.parse(config.data);\n\tconst { email, password } = data;\n\n\tconst user = _.cloneDeep(authDB.users.find(_user => _user.data.email === email));\n\n\tconst error = {\n\t\temail: user ? null : 'Check your username/email',\n\t\tpassword: user && user.password === password ? null : 'Check your password'\n\t};\n\n\tif (!error.email && !error.password && !error.displayName) {\n\t\tdelete user.password;\n\n\t\tconst access_token = jwt.sign({ id: user.uuid }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn });\n\n\t\tconst response = {\n\t\t\tuser,\n\t\t\taccess_token\n\t\t};\n\n\t\treturn [200, response];\n\t}\n\treturn [200, { error }];\n});\n\nmock.onGet('/api/auth/access-token').reply(config => {\n\tconst data = JSON.parse(config.data);\n\tconst { access_token } = data;\n\n\ttry {\n\t\tconst { id } = jwt.verify(access_token, jwtConfig.secret);\n\n\t\tconst user = _.cloneDeep(authDB.users.find(_user => _user.uuid === id));\n\t\tdelete user.password;\n\n\t\tconst updatedAccessToken = jwt.sign({ id: user.uuid }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn });\n\n\t\tconst response = {\n\t\t\tuser,\n\t\t\taccess_token: updatedAccessToken\n\t\t};\n\n\t\treturn [200, response];\n\t} catch (e) {\n\t\tconst error = 'Invalid access token detected';\n\t\treturn [401, { error }];\n\t}\n});\n\nmock.onPost('/api/auth/register').reply(request => {\n\tconst data = JSON.parse(request.data);\n\tconst { displayName, password, email } = data;\n\tconst isEmailExists = authDB.users.find(_user => _user.data.email === email);\n\tconst error = {\n\t\temail: isEmailExists ? 'The email is already in use' : null,\n\t\tdisplayName: displayName !== '' ? null : 'Enter display name',\n\t\tpassword: null\n\t};\n\tif (!error.displayName && !error.password && !error.email) {\n\t\tconst newUser = {\n\t\t\tuuid: FuseUtils.generateGUID(),\n\t\t\tfrom: 'custom-db',\n\t\t\tpassword,\n\t\t\trole: 'admin',\n\t\t\tdata: {\n\t\t\t\tdisplayName,\n\t\t\t\tphotoURL: 'assets/images/avatars/Abbott.jpg',\n\t\t\t\temail,\n\t\t\t\tsettings: {},\n\t\t\t\tshortcuts: []\n\t\t\t}\n\t\t};\n\n\t\tauthDB.users = [...authDB.users, newUser];\n\n\t\tconst user = _.cloneDeep(newUser);\n\t\tdelete user.password;\n\n\t\tconst access_token = jwt.sign({ id: user.uuid }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn });\n\n\t\tconst response = {\n\t\t\tuser,\n\t\t\taccess_token\n\t\t};\n\n\t\treturn [200, response];\n\t}\n\treturn [200, { error }];\n});\n\nmock.onPost('/api/auth/user/update').reply(config => {\n\tconst data = JSON.parse(config.data);\n\tconst { user } = data;\n\n\tauthDB.users = authDB.users.map(_user => {\n\t\tif (user.uuid === user.id) {\n\t\t\treturn _.merge(_user, user);\n\t\t}\n\t\treturn _user;\n\t});\n\n\treturn [200, user];\n});\n"]},"metadata":{},"sourceType":"module"}