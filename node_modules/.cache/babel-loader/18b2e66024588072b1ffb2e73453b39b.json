{"ast":null,"code":"import _toConsumableArray from\"D:\\\\proyectos_react\\\\Proyecto_sena_desarrollo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectWithoutProperties from\"D:\\\\proyectos_react\\\\Proyecto_sena_desarrollo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React from'react';import Checkbox from'@material-ui/core/Checkbox';import Table from'@material-ui/core/Table';import TableBody from'@material-ui/core/TableBody';import TableCell from'@material-ui/core/TableCell';import TableContainer from'@material-ui/core/TableContainer';import TableHead from'@material-ui/core/TableHead';import TablePagination from'@material-ui/core/TablePagination';import TableRow from'@material-ui/core/TableRow';import TableSortLabel from'@material-ui/core/TableSortLabel';import{useGlobalFilter,usePagination,useRowSelect,useSortBy,useTable}from'react-table';import clsx from'clsx';import ContactsTablePaginationActions from'./ContactsTablePaginationActions';var IndeterminateCheckbox=React.forwardRef(function(_ref,ref){var indeterminate=_ref.indeterminate,rest=_objectWithoutProperties(_ref,[\"indeterminate\"]);var defaultRef=React.useRef();var resolvedRef=ref||defaultRef;React.useEffect(function(){resolvedRef.current.indeterminate=indeterminate;},[resolvedRef,indeterminate]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Checkbox,Object.assign({ref:resolvedRef},rest)));});var EnhancedTable=function EnhancedTable(_ref2){var columns=_ref2.columns,data=_ref2.data,onRowClick=_ref2.onRowClick;var _useTable=useTable({columns:columns,data:data,autoResetPage:true},useGlobalFilter,useSortBy,usePagination,useRowSelect,function(hooks){hooks.allColumns.push(function(_columns){return[// Let's make a column for selection\n{id:'selection',sortable:false,// The header can use the table's getToggleAllRowsSelectedProps method\n// to render a checkbox.  Pagination is a problem since this will select all\n// rows even though not all rows are on the current page.  The solution should\n// be server side pagination.  For one, the clients should not download all\n// rows in most cases.  The client should only download data for the current page.\n// In that case, getToggleAllRowsSelectedProps works fine.\nHeader:function Header(_ref3){var getToggleAllRowsSelectedProps=_ref3.getToggleAllRowsSelectedProps;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(IndeterminateCheckbox,getToggleAllRowsSelectedProps()));},// The cell can use the individual row's getToggleRowSelectedProps method\n// to the render a checkbox\nCell:function Cell(_ref4){var row=_ref4.row;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(IndeterminateCheckbox,Object.assign({},row.getToggleRowSelectedProps(),{onClick:function onClick(ev){return ev.stopPropagation();}})));}}].concat(_toConsumableArray(_columns));});}),getTableProps=_useTable.getTableProps,headerGroups=_useTable.headerGroups,prepareRow=_useTable.prepareRow,page=_useTable.page,gotoPage=_useTable.gotoPage,setPageSize=_useTable.setPageSize,_useTable$state=_useTable.state,pageIndex=_useTable$state.pageIndex,pageSize=_useTable$state.pageSize;var handleChangePage=function handleChangePage(event,newPage){gotoPage(newPage);};var handleChangeRowsPerPage=function handleChangeRowsPerPage(event){setPageSize(Number(event.target.value));};// Render the UI for your table\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"flex flex-col min-h-full sm:border-1 sm:rounded-16 overflow-hidden\"},/*#__PURE__*/React.createElement(TableContainer,{className:\"flex flex-1\"},/*#__PURE__*/React.createElement(Table,Object.assign({},getTableProps(),{stickyHeader:true}),/*#__PURE__*/React.createElement(TableHead,null,headerGroups.map(function(headerGroup){return/*#__PURE__*/React.createElement(TableRow,headerGroup.getHeaderGroupProps(),headerGroup.headers.map(function(column){return/*#__PURE__*/React.createElement(TableCell,Object.assign({className:\"whitespace-no-wrap p-4 md:p-12\"},!column.sortable?column.getHeaderProps():column.getHeaderProps(column.getSortByToggleProps())),column.render('Header'),column.sortable?/*#__PURE__*/React.createElement(TableSortLabel,{active:column.isSorted// react-table has a unsorted state which is not treated here\n,direction:column.isSortedDesc?'desc':'asc'}):null);}));})),/*#__PURE__*/React.createElement(TableBody,null,page.map(function(row,i){prepareRow(row);return/*#__PURE__*/React.createElement(TableRow,Object.assign({},row.getRowProps(),{onClick:function onClick(ev){return onRowClick(ev,row);},className:\"truncate cursor-pointer\"}),row.cells.map(function(cell){return/*#__PURE__*/React.createElement(TableCell,Object.assign({},cell.getCellProps(),{className:clsx('p-4 md:p-12',cell.column.className)}),cell.render('Cell'));}));})))),/*#__PURE__*/React.createElement(TablePagination,{component:\"div\",classes:{root:'flex-shrink-0 border-t-1'},rowsPerPageOptions:[5,10,25,{label:'All',value:data.length+1}],colSpan:5,count:data.length,rowsPerPage:pageSize,page:pageIndex,SelectProps:{inputProps:{'aria-label':'rows per page'},native:false},onChangePage:handleChangePage,onChangeRowsPerPage:handleChangeRowsPerPage,ActionsComponent:ContactsTablePaginationActions}));};export default EnhancedTable;","map":null,"metadata":{},"sourceType":"module"}