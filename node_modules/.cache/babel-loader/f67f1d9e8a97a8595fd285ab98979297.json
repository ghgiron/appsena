{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getLabels = createAsyncThunk('notesApp/labels/getLabels', async () => {\n  const response = await axios.get('/api/notes-app/labels');\n  const data = await response.data;\n  return data;\n});\nexport const updateLabels = createAsyncThunk('notesApp/labels/updateLabels', async labels => {\n  const response = await axios.post('/api/notes-app/update-labels', {\n    labels: Object.values(labels)\n  });\n  const data = await response.data;\n  return data;\n});\nconst labelsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectLabels,\n  selectEntities: selectLabelsEntities,\n  selectById: selectLabelById\n} = labelsAdapter.getSelectors(state => state.notesApp.labels);\nconst labelsSlice = createSlice({\n  name: 'notesApp/labels',\n  initialState: labelsAdapter.getInitialState({\n    labelsDialogOpen: false\n  }),\n  reducers: {\n    openLabelsDialog: (state, action) => {\n      state.labelsDialogOpen = true;\n    },\n    closeLabelsDialog: (state, action) => {\n      state.labelsDialogOpen = false;\n    }\n  },\n  extraReducers: {\n    [getLabels.fulfilled]: labelsAdapter.setAll,\n    [updateLabels.fulfilled]: labelsAdapter.setAll\n  }\n});\nexport const {\n  openLabelsDialog,\n  closeLabelsDialog\n} = labelsSlice.actions;\nexport default labelsSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/notes/store/labelsSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","axios","getLabels","response","get","data","updateLabels","labels","post","Object","values","labelsAdapter","selectAll","selectLabels","selectEntities","selectLabelsEntities","selectById","selectLabelById","getSelectors","state","notesApp","labelsSlice","name","initialState","getInitialState","labelsDialogOpen","reducers","openLabelsDialog","action","closeLabelsDialog","extraReducers","fulfilled","setAll","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,mBAAxC,QAAmE,kBAAnE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CAAC,2BAAD,EAA8B,YAAY;AAClF,QAAMI,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,uBAAV,CAAvB;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AAEA,SAAOA,IAAP;AACA,CALwC,CAAlC;AAOP,OAAO,MAAMC,YAAY,GAAGP,gBAAgB,CAAC,8BAAD,EAAiC,MAAMQ,MAAN,IAAgB;AAC5F,QAAMJ,QAAQ,GAAG,MAAMF,KAAK,CAACO,IAAN,CAAW,8BAAX,EAA2C;AAAED,IAAAA,MAAM,EAAEE,MAAM,CAACC,MAAP,CAAcH,MAAd;AAAV,GAA3C,CAAvB;AACA,QAAMF,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AAEA,SAAOA,IAAP;AACA,CAL2C,CAArC;AAOP,MAAMM,aAAa,GAAGX,mBAAmB,CAAC,EAAD,CAAzC;AAEA,OAAO,MAAM;AACZY,EAAAA,SAAS,EAAEC,YADC;AAEZC,EAAAA,cAAc,EAAEC,oBAFJ;AAGZC,EAAAA,UAAU,EAAEC;AAHA,IAITN,aAAa,CAACO,YAAd,CAA2BC,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeb,MAAnD,CAJG;AAMP,MAAMc,WAAW,GAAGvB,WAAW,CAAC;AAC/BwB,EAAAA,IAAI,EAAE,iBADyB;AAE/BC,EAAAA,YAAY,EAAEZ,aAAa,CAACa,eAAd,CAA8B;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GAA9B,CAFiB;AAG/BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,gBAAgB,EAAE,CAACR,KAAD,EAAQS,MAAR,KAAmB;AACpCT,MAAAA,KAAK,CAACM,gBAAN,GAAyB,IAAzB;AACA,KAHQ;AAITI,IAAAA,iBAAiB,EAAE,CAACV,KAAD,EAAQS,MAAR,KAAmB;AACrCT,MAAAA,KAAK,CAACM,gBAAN,GAAyB,KAAzB;AACA;AANQ,GAHqB;AAW/BK,EAAAA,aAAa,EAAE;AACd,KAAC5B,SAAS,CAAC6B,SAAX,GAAuBpB,aAAa,CAACqB,MADvB;AAEd,KAAC1B,YAAY,CAACyB,SAAd,GAA0BpB,aAAa,CAACqB;AAF1B;AAXgB,CAAD,CAA/B;AAiBA,OAAO,MAAM;AAAEL,EAAAA,gBAAF;AAAoBE,EAAAA;AAApB,IAA0CR,WAAW,CAACY,OAA5D;AAEP,eAAeZ,WAAW,CAACa,OAA3B","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getLabels = createAsyncThunk('notesApp/labels/getLabels', async () => {\n\tconst response = await axios.get('/api/notes-app/labels');\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const updateLabels = createAsyncThunk('notesApp/labels/updateLabels', async labels => {\n\tconst response = await axios.post('/api/notes-app/update-labels', { labels: Object.values(labels) });\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nconst labelsAdapter = createEntityAdapter({});\n\nexport const {\n\tselectAll: selectLabels,\n\tselectEntities: selectLabelsEntities,\n\tselectById: selectLabelById\n} = labelsAdapter.getSelectors(state => state.notesApp.labels);\n\nconst labelsSlice = createSlice({\n\tname: 'notesApp/labels',\n\tinitialState: labelsAdapter.getInitialState({ labelsDialogOpen: false }),\n\treducers: {\n\t\topenLabelsDialog: (state, action) => {\n\t\t\tstate.labelsDialogOpen = true;\n\t\t},\n\t\tcloseLabelsDialog: (state, action) => {\n\t\t\tstate.labelsDialogOpen = false;\n\t\t}\n\t},\n\textraReducers: {\n\t\t[getLabels.fulfilled]: labelsAdapter.setAll,\n\t\t[updateLabels.fulfilled]: labelsAdapter.setAll\n\t}\n});\n\nexport const { openLabelsDialog, closeLabelsDialog } = labelsSlice.actions;\n\nexport default labelsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}