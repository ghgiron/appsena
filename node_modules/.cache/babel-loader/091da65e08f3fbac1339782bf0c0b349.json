{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; //import firebase from 'firebase';\n\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice'; //import auth0Service from 'app/services/auth0Service';\n//import firebaseService from 'app/services/firebaseService';\n\nimport jwtService from 'app/services/jwtService';\n/* export const setUserDataAuth0 = tokenData => async dispatch => {\n\tconst user = {\n\t\trole: ['admin'],\n\t\tfrom: 'auth0',\n\t\tdata: {\n\t\t\tdisplayName: tokenData.username || tokenData.name,\n\t\t\tphotoURL: tokenData.picture,\n\t\t\temail: tokenData.email,\n\t\t\tsettings:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.settings ? tokenData.user_metadata.settings : {},\n\t\t\tshortcuts:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.shortcuts ? tokenData.user_metadata.shortcuts : []\n\t\t}\n\t};\n\n\treturn dispatch(setUserData(user));\n}; */\n\n/*\nexport const setUserDataFirebase = (user, authUser) => async dispatch => {\n\tif (\n\t\tuser &&\n\t\tuser.data &&\n\t\tuser.data.settings &&\n\t\tuser.data.settings.theme &&\n\t\tuser.data.settings.layout &&\n\t\tuser.data.settings.layout.style\n\t) {\n\t\t// Set user data but do not update\n\t\treturn dispatch(setUserData(user));\n\t}\n\n\t// Create missing user settings\n\treturn dispatch(createUserSettingsFirebase(authUser));\n};*/\n\nexport const createUserSettingsFirebase = authUser => async (dispatch, getState) => {\n  const guestUser = getState().auth.user;\n  const fuseDefaultSettings = getState().fuse.settings.defaults;\n  const {\n    currentUser\n  } = firebase.auth();\n  /**\n   * Merge with current Settings\n   */\n\n  const user = _.merge({}, guestUser, {\n    uid: authUser.uid,\n    from: 'firebase',\n    role: ['admin'],\n    data: {\n      displayName: authUser.displayName,\n      email: authUser.email,\n      settings: { ...fuseDefaultSettings\n      }\n    }\n  });\n\n  currentUser.updateProfile(user.data);\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(user));\n};\nexport const setUserData = user => async (dispatch, getState) => {\n  /*\n         You can redirect the logged-in user to a specific route depending on his role\n          */\n  history.location.state = {\n    redirectUrl: 'apps/academy' // for example 'apps/academy'\n\n  };\n  /*\n     Set User Settings\n      */\n\n  dispatch(setDefaultSettings(user.data.settings));\n  dispatch(setUser(user));\n};\nexport const updateUserSettings = settings => async (dispatch, getState) => {\n  const oldUser = getState().auth.user;\n\n  const user = _.merge({}, oldUser, {\n    data: {\n      settings\n    }\n  });\n\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(user));\n};\nexport const updateUserShortcuts = shortcuts => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n  const newUser = { ...user,\n    data: { ...user.data,\n      shortcuts\n    }\n  };\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(newUser));\n};\nexport const logoutUser = () => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return null;\n  }\n\n  history.push({\n    pathname: '/'\n  });\n\n  switch (user.from) {\n    /* \tcase 'jwt': {\n    \t\tjwtService.signOut();\n    \t\tbreak;\n    \t}\n    \tcase 'auth0': {\n    \t\tauth0Service.logout();\n    \t\tbreak;\n    \t} */\n    default:\n      {\n        jwtService.logout();\n      }\n  }\n\n  dispatch(setInitialSettings());\n  dispatch(userLoggedOut());\n};\nexport const updateUserData = user => async (dispatch, getState) => {\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return;\n  }\n\n  switch (user.from) {\n    /* \tcase 'firebase': {\n    \t\tfirebaseService\n    \t\t\t.updateUserData(user)\n    \t\t\t.then(() => {\n    \t\t\t\tdispatch(showMessage({ message: 'User data saved to firebase' }));\n    \t\t\t})\n    \t\t\t.catch(error => {\n    \t\t\t\tdispatch(showMessage({ message: error.message }));\n    \t\t\t});\n    \t\tbreak;\n    \t}\n    \tcase 'auth0': {\n    \t\tauth0Service\n    \t\t\t.updateUserData({\n    \t\t\t\tsettings: user.data.settings,\n    \t\t\t\tshortcuts: user.data.shortcuts\n    \t\t\t})\n    \t\t\t.then(() => {\n    \t\t\t\tdispatch(showMessage({ message: 'User data saved to auth0' }));\n    \t\t\t})\n    \t\t\t.catch(error => {\n    \t\t\t\tdispatch(showMessage({ message: error.message }));\n    \t\t\t});\n    \t\tbreak;\n    \t} */\n    default:\n      {\n        jwtService.updateUserData(user).then(() => {\n          dispatch(showMessage({\n            message: 'User data saved with api'\n          }));\n        }).catch(error => {\n          dispatch(showMessage({\n            message: error.message\n          }));\n        });\n        break;\n      }\n  }\n};\nconst initialState = {\n  role: [],\n  // guest\n  data: {\n    displayName: 'John Doe',\n    photoURL: 'assets/images/avatars/Velazquez.jpg',\n    email: 'johndoe@withinpixels.com',\n    shortcuts: ['calendar', 'mail', 'contacts', 'todo']\n  }\n};\nconst userSlice = createSlice({\n  name: 'auth/user',\n  initialState,\n  reducers: {\n    setUser: (state, action) => action.payload,\n    userLoggedOut: (state, action) => initialState\n  },\n  extraReducers: {}\n});\nexport const {\n  setUser,\n  userLoggedOut\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/auth/store/userSlice.js"],"names":["createSlice","history","_","setInitialSettings","setDefaultSettings","showMessage","jwtService","createUserSettingsFirebase","authUser","dispatch","getState","guestUser","auth","user","fuseDefaultSettings","fuse","settings","defaults","currentUser","firebase","merge","uid","from","role","data","displayName","email","updateProfile","updateUserData","setUserData","location","state","redirectUrl","setUser","updateUserSettings","oldUser","updateUserShortcuts","shortcuts","newUser","logoutUser","length","push","pathname","logout","userLoggedOut","then","message","catch","error","initialState","photoURL","userSlice","name","reducers","action","payload","extraReducers","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n//import firebase from 'firebase';\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice';\n//import auth0Service from 'app/services/auth0Service';\n//import firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\n\n/* export const setUserDataAuth0 = tokenData => async dispatch => {\n\tconst user = {\n\t\trole: ['admin'],\n\t\tfrom: 'auth0',\n\t\tdata: {\n\t\t\tdisplayName: tokenData.username || tokenData.name,\n\t\t\tphotoURL: tokenData.picture,\n\t\t\temail: tokenData.email,\n\t\t\tsettings:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.settings ? tokenData.user_metadata.settings : {},\n\t\t\tshortcuts:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.shortcuts ? tokenData.user_metadata.shortcuts : []\n\t\t}\n\t};\n\n\treturn dispatch(setUserData(user));\n}; */\n/*\nexport const setUserDataFirebase = (user, authUser) => async dispatch => {\n\tif (\n\t\tuser &&\n\t\tuser.data &&\n\t\tuser.data.settings &&\n\t\tuser.data.settings.theme &&\n\t\tuser.data.settings.layout &&\n\t\tuser.data.settings.layout.style\n\t) {\n\t\t// Set user data but do not update\n\t\treturn dispatch(setUserData(user));\n\t}\n\n\t// Create missing user settings\n\treturn dispatch(createUserSettingsFirebase(authUser));\n};*/\n\nexport const createUserSettingsFirebase = authUser => async (dispatch, getState) => {\n\tconst guestUser = getState().auth.user;\n\tconst fuseDefaultSettings = getState().fuse.settings.defaults;\n\tconst { currentUser } = firebase.auth();\n\n\t/**\n\t * Merge with current Settings\n\t */\n\tconst user = _.merge({}, guestUser, {\n\t\tuid: authUser.uid,\n\t\tfrom: 'firebase',\n\t\trole: ['admin'],\n\t\tdata: {\n\t\t\tdisplayName: authUser.displayName,\n\t\t\temail: authUser.email,\n\t\t\tsettings: { ...fuseDefaultSettings }\n\t\t}\n\t});\n\tcurrentUser.updateProfile(user.data);\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(user));\n};\n\nexport const setUserData = user => async (dispatch, getState) => {\n\t/*\n        You can redirect the logged-in user to a specific route depending on his role\n         */\n\n\thistory.location.state = {\n\t\tredirectUrl: 'apps/academy' // for example 'apps/academy'\n\t};\n\n\t/*\n    Set User Settings\n     */\n\tdispatch(setDefaultSettings(user.data.settings));\n\n\tdispatch(setUser(user));\n};\n\nexport const updateUserSettings = settings => async (dispatch, getState) => {\n\tconst oldUser = getState().auth.user;\n\tconst user = _.merge({}, oldUser, { data: { settings } });\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(user));\n};\n\nexport const updateUserShortcuts = shortcuts => async (dispatch, getState) => {\n\tconst { user } = getState().auth;\n\tconst newUser = {\n\t\t...user,\n\t\tdata: {\n\t\t\t...user.data,\n\t\t\tshortcuts\n\t\t}\n\t};\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(newUser));\n};\n\nexport const logoutUser = () => async (dispatch, getState) => {\n\tconst { user } = getState().auth;\n\n\tif (!user.role || user.role.length === 0) {\n\t\t// is guest\n\t\treturn null;\n\t}\n\n\thistory.push({\n\t\tpathname: '/'\n\t});\n\n\tswitch (user.from) {\n\t/* \tcase 'jwt': {\n\t\t\tjwtService.signOut();\n\t\t\tbreak;\n\t\t}\n\t\tcase 'auth0': {\n\t\t\tauth0Service.logout();\n\t\t\tbreak;\n\t\t} */\n\t\tdefault: {\n\t\t\tjwtService.logout();\n\t\t}\n\t}\n\n\tdispatch(setInitialSettings());\n\n\tdispatch(userLoggedOut());\n};\n\nexport const updateUserData = user => async (dispatch, getState) => {\n\tif (!user.role || user.role.length === 0) {\n\t\t// is guest\n\t\treturn;\n\t}\n\tswitch (user.from) {\n\t/* \tcase 'firebase': {\n\t\t\tfirebaseService\n\t\t\t\t.updateUserData(user)\n\t\t\t\t.then(() => {\n\t\t\t\t\tdispatch(showMessage({ message: 'User data saved to firebase' }));\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase 'auth0': {\n\t\t\tauth0Service\n\t\t\t\t.updateUserData({\n\t\t\t\t\tsettings: user.data.settings,\n\t\t\t\t\tshortcuts: user.data.shortcuts\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tdispatch(showMessage({ message: 'User data saved to auth0' }));\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t\t});\n\t\t\tbreak;\n\t\t} */\n\t\tdefault: {\n\t\t\tjwtService\n\t\t\t\t.updateUserData(user)\n\t\t\t\t.then(() => {\n\t\t\t\t\tdispatch(showMessage({ message: 'User data saved with api' }));\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t}\n};\n\nconst initialState = {\n\trole: [], // guest\n\tdata: {\n\t\tdisplayName: 'John Doe',\n\t\tphotoURL: 'assets/images/avatars/Velazquez.jpg',\n\t\temail: 'johndoe@withinpixels.com',\n\t\tshortcuts: ['calendar', 'mail', 'contacts', 'todo']\n\t}\n};\n\nconst userSlice = createSlice({\n\tname: 'auth/user',\n\tinitialState,\n\treducers: {\n\t\tsetUser: (state, action) => action.payload,\n\t\tuserLoggedOut: (state, action) => initialState\n\t},\n\textraReducers: {}\n});\n\nexport const { setUser, userLoggedOut } = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}