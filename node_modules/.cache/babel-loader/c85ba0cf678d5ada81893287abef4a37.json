{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nexport const updateCard = createAsyncThunk('scrumboardApp/card/updateCard', async ({\n  boardId,\n  card\n}, {\n  dispatch\n}) => {\n  const response = await axios.post('/api/scrumboard-app/card/update', {\n    boardId,\n    card\n  });\n  const data = await response.data;\n  dispatch(showMessage({\n    message: 'Card Saved',\n    autoHideDuration: 2000,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    }\n  }));\n  return data;\n});\nexport const removeCard = createAsyncThunk('scrumboardApp/card/removeCard', async ({\n  boardId,\n  cardId\n}, {\n  dispatch\n}) => {\n  const response = await axios.post('/api/scrumboard-app/card/remove', {\n    boardId,\n    cardId\n  });\n  const data = await response.data;\n  dispatch(closeCardDialog());\n  return data;\n});\nconst cardSlice = createSlice({\n  name: 'scrumboardApp/card',\n  initialState: {\n    dialogOpen: false,\n    data: null\n  },\n  reducers: {\n    openCardDialog: (state, action) => {\n      state.dialogOpen = true;\n      state.data = action.payload;\n    },\n    closeCardDialog: (state, action) => {\n      state.dialogOpen = false;\n      state.data = null;\n    }\n  },\n  extraReducers: {\n    [updateCard.fulfilled]: (state, action) => {\n      state.data = action.payload;\n    }\n  }\n});\nexport const {\n  openCardDialog,\n  closeCardDialog\n} = cardSlice.actions;\nexport default cardSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/scrumboard/store/cardSlice.js"],"names":["createSlice","createAsyncThunk","axios","showMessage","updateCard","boardId","card","dispatch","response","post","data","message","autoHideDuration","anchorOrigin","vertical","horizontal","removeCard","cardId","closeCardDialog","cardSlice","name","initialState","dialogOpen","reducers","openCardDialog","state","action","payload","extraReducers","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAEA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,+BAAD,EAAkC,OAAO;AAAEI,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAP,EAA0B;AAAEC,EAAAA;AAAF,CAA1B,KAA2C;AACtH,QAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,iCAAX,EAA8C;AACpEJ,IAAAA,OADoE;AAEpEC,IAAAA;AAFoE,GAA9C,CAAvB;AAKA,QAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AAEAH,EAAAA,QAAQ,CACPJ,WAAW,CAAC;AACXQ,IAAAA,OAAO,EAAE,YADE;AAEXC,IAAAA,gBAAgB,EAAE,IAFP;AAGXC,IAAAA,YAAY,EAAE;AACbC,MAAAA,QAAQ,EAAE,KADG;AAEbC,MAAAA,UAAU,EAAE;AAFC;AAHH,GAAD,CADJ,CAAR;AAWA,SAAOL,IAAP;AACA,CApByC,CAAnC;AAsBP,OAAO,MAAMM,UAAU,GAAGf,gBAAgB,CACzC,+BADyC,EAEzC,OAAO;AAAEI,EAAAA,OAAF;AAAWY,EAAAA;AAAX,CAAP,EAA4B;AAAEV,EAAAA;AAAF,CAA5B,KAA6C;AAC5C,QAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,iCAAX,EAA8C;AACpEJ,IAAAA,OADoE;AAEpEY,IAAAA;AAFoE,GAA9C,CAAvB;AAKA,QAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AAEAH,EAAAA,QAAQ,CAACW,eAAe,EAAhB,CAAR;AACA,SAAOR,IAAP;AACA,CAZwC,CAAnC;AAeP,MAAMS,SAAS,GAAGnB,WAAW,CAAC;AAC7BoB,EAAAA,IAAI,EAAE,oBADuB;AAE7BC,EAAAA,YAAY,EAAE;AACbC,IAAAA,UAAU,EAAE,KADC;AAEbZ,IAAAA,IAAI,EAAE;AAFO,GAFe;AAM7Ba,EAAAA,QAAQ,EAAE;AACTC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACH,UAAN,GAAmB,IAAnB;AACAG,MAAAA,KAAK,CAACf,IAAN,GAAagB,MAAM,CAACC,OAApB;AACA,KAJQ;AAKTT,IAAAA,eAAe,EAAE,CAACO,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACH,UAAN,GAAmB,KAAnB;AACAG,MAAAA,KAAK,CAACf,IAAN,GAAa,IAAb;AACA;AARQ,GANmB;AAgB7BkB,EAAAA,aAAa,EAAE;AACd,KAACxB,UAAU,CAACyB,SAAZ,GAAwB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACf,IAAN,GAAagB,MAAM,CAACC,OAApB;AACA;AAHa;AAhBc,CAAD,CAA7B;AAuBA,OAAO,MAAM;AAAEH,EAAAA,cAAF;AAAkBN,EAAAA;AAAlB,IAAsCC,SAAS,CAACW,OAAtD;AAEP,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { showMessage } from 'app/store/fuse/messageSlice';\n\nexport const updateCard = createAsyncThunk('scrumboardApp/card/updateCard', async ({ boardId, card }, { dispatch }) => {\n\tconst response = await axios.post('/api/scrumboard-app/card/update', {\n\t\tboardId,\n\t\tcard\n\t});\n\n\tconst data = await response.data;\n\n\tdispatch(\n\t\tshowMessage({\n\t\t\tmessage: 'Card Saved',\n\t\t\tautoHideDuration: 2000,\n\t\t\tanchorOrigin: {\n\t\t\t\tvertical: 'top',\n\t\t\t\thorizontal: 'right'\n\t\t\t}\n\t\t})\n\t);\n\n\treturn data;\n});\n\nexport const removeCard = createAsyncThunk(\n\t'scrumboardApp/card/removeCard',\n\tasync ({ boardId, cardId }, { dispatch }) => {\n\t\tconst response = await axios.post('/api/scrumboard-app/card/remove', {\n\t\t\tboardId,\n\t\t\tcardId\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\tdispatch(closeCardDialog());\n\t\treturn data;\n\t}\n);\n\nconst cardSlice = createSlice({\n\tname: 'scrumboardApp/card',\n\tinitialState: {\n\t\tdialogOpen: false,\n\t\tdata: null\n\t},\n\treducers: {\n\t\topenCardDialog: (state, action) => {\n\t\t\tstate.dialogOpen = true;\n\t\t\tstate.data = action.payload;\n\t\t},\n\t\tcloseCardDialog: (state, action) => {\n\t\t\tstate.dialogOpen = false;\n\t\t\tstate.data = null;\n\t\t}\n\t},\n\textraReducers: {\n\t\t[updateCard.fulfilled]: (state, action) => {\n\t\t\tstate.data = action.payload;\n\t\t}\n\t}\n});\n\nexport const { openCardDialog, closeCardDialog } = cardSlice.actions;\n\nexport default cardSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}