{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyectos_react\\\\Proyecto_sena\\\\src\\\\app\\\\main\\\\documentation\\\\material-ui-components\\\\components\\\\autocomplete\\\\FreeSoloCreateOptionDialog.js\";\n\n/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nconst filter = createFilterOptions();\nexport default function FreeSoloCreateOptionDialog() {\n  const [value, setValue] = React.useState(null);\n  const [open, toggleOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setDialogValue({\n      title: '',\n      year: ''\n    });\n    toggleOpen(false);\n  };\n\n  const [dialogValue, setDialogValue] = React.useState({\n    title: '',\n    year: ''\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setValue({\n      title: dialogValue.title,\n      year: parseInt(dialogValue.year, 10)\n    });\n    handleClose();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        // timeout to avoid instant validation of the dialog's form.\n        setTimeout(() => {\n          toggleOpen(true);\n          setDialogValue({\n            title: newValue,\n            year: ''\n          });\n        });\n      } else if (newValue && newValue.inputValue) {\n        toggleOpen(true);\n        setDialogValue({\n          title: newValue.inputValue,\n          year: ''\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `Add \"${params.inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    id: \"free-solo-dialog-demo\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // e.g value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      }\n\n      if (option.inputValue) {\n        return option.inputValue;\n      }\n\n      return option.title;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    renderOption: option => option.title,\n    style: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Free solo dialog\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"Add a new film\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Did you miss any film in our list? Please, add it!\"), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"name\",\n    value: dialogValue.title,\n    onChange: event => setDialogValue({ ...dialogValue,\n      title: event.target.value\n    }),\n    label: \"title\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    margin: \"dense\",\n    id: \"name\",\n    value: dialogValue.year,\n    onChange: event => setDialogValue({ ...dialogValue,\n      year: event.target.value\n    }),\n    label: \"year\",\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Add\")))));\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/documentation/material-ui-components/components/autocomplete/FreeSoloCreateOptionDialog.js"],"names":["React","TextField","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","Autocomplete","createFilterOptions","filter","FreeSoloCreateOptionDialog","value","setValue","useState","open","toggleOpen","handleClose","setDialogValue","title","year","dialogValue","handleSubmit","event","preventDefault","parseInt","newValue","setTimeout","inputValue","options","params","filtered","push","top100Films","option","width","target"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\nconst filter = createFilterOptions();\n\nexport default function FreeSoloCreateOptionDialog() {\n  const [value, setValue] = React.useState(null);\n  const [open, toggleOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setDialogValue({\n      title: '',\n      year: '',\n    });\n\n    toggleOpen(false);\n  };\n\n  const [dialogValue, setDialogValue] = React.useState({\n    title: '',\n    year: '',\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setValue({\n      title: dialogValue.title,\n      year: parseInt(dialogValue.year, 10),\n    });\n\n    handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === 'string') {\n            // timeout to avoid instant validation of the dialog's form.\n            setTimeout(() => {\n              toggleOpen(true);\n              setDialogValue({\n                title: newValue,\n                year: '',\n              });\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              title: newValue.inputValue,\n              year: '',\n            });\n          } else {\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== '') {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`,\n            });\n          }\n\n          return filtered;\n        }}\n        id=\"free-solo-dialog-demo\"\n        options={top100Films}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          }\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          return option.title;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(option) => option.title}\n        style={{ width: 300 }}\n        freeSolo\n        renderInput={(params) => (\n          <TextField {...params} label=\"Free solo dialog\" variant=\"outlined\" />\n        )}\n      />\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <form onSubmit={handleSubmit}>\n          <DialogTitle id=\"form-dialog-title\">Add a new film</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Did you miss any film in our list? Please, add it!\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              value={dialogValue.title}\n              onChange={(event) => setDialogValue({ ...dialogValue, title: event.target.value })}\n              label=\"title\"\n              type=\"text\"\n            />\n            <TextField\n              margin=\"dense\"\n              id=\"name\"\n              value={dialogValue.year}\n              onChange={(event) => setDialogValue({ ...dialogValue, year: event.target.value })}\n              label=\"year\"\n              type=\"number\"\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\">\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'Léon: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  {\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964,\n  },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL·E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Amélie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n"]},"metadata":{},"sourceType":"module"}