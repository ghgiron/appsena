{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { getUserData } from './userSlice';\nexport const getContacts = createAsyncThunk('contactsApp/gestiontercero/getContacts', async (routeParams, {\n  getState\n}) => {\n  routeParams = routeParams || getState().contactsApp.contacts.routeParams;\n  const response = await axios.get('/api/contacts-app/contacts', {\n    params: routeParams\n  });\n  const data = await response.data;\n  return {\n    data,\n    routeParams\n  };\n});\nexport const addContact = createAsyncThunk('contactsApp/contacts/addContact', async (contact, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/add-contact', {\n    contact\n  });\n  const data = await response.data;\n  dispatch(getContacts());\n  return data;\n});\nexport const updateContact = createAsyncThunk('contactsApp/contacts/updateContact', async (contact, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/update-contact', {\n    contact\n  });\n  const data = await response.data;\n  dispatch(getContacts());\n  return data;\n});\nexport const removeContact = createAsyncThunk('contactsApp/contacts/removeContact', async (contactId, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/remove-contact', {\n    contactId\n  });\n  const data = await response.data;\n  dispatch(getContacts());\n  return data;\n});\nexport const removeContacts = createAsyncThunk('contactsApp/contacts/removeContacts', async (contactIds, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/remove-contacts', {\n    contactIds\n  });\n  const data = await response.data;\n  dispatch(getContacts());\n  return data;\n});\nexport const toggleStarredContact = createAsyncThunk('contactsApp/contacts/toggleStarredContact', async (contactId, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/toggle-starred-contact', {\n    contactId\n  });\n  const data = await response.data;\n  dispatch(getUserData());\n  dispatch(getContacts());\n  return data;\n});\nexport const toggleStarredContacts = createAsyncThunk('contactsApp/contacts/toggleStarredContacts', async (contactIds, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/toggle-starred-contacts', {\n    contactIds\n  });\n  const data = await response.data;\n  dispatch(getUserData());\n  dispatch(getContacts());\n  return data;\n});\nexport const setContactsStarred = createAsyncThunk('contactsApp/contacts/setContactsStarred', async (contactIds, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/set-contacts-starred', {\n    contactIds\n  });\n  const data = await response.data;\n  dispatch(getUserData());\n  dispatch(getContacts());\n  return data;\n});\nexport const setContactsUnstarred = createAsyncThunk('contactsApp/contacts/setContactsUnstarred', async (contactIds, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/contacts-app/set-contacts-unstarred', {\n    contactIds\n  });\n  const data = await response.data;\n  dispatch(getUserData());\n  dispatch(getContacts());\n  return data;\n});\nconst contactsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectContacts,\n  selectById: selectContactsById\n} = contactsAdapter.getSelectors(state => state.contactsApp.contacts);\nconst contactsSlice = createSlice({\n  name: 'contactsApp/gestiontercero',\n  initialState: contactsAdapter.getInitialState({\n    searchText: '',\n    routeParams: {},\n    contactDialog: {\n      type: 'new',\n      props: {\n        open: false\n      },\n      data: null\n    }\n  }),\n  reducers: {\n    setContactsSearchText: {\n      reducer: (state, action) => {\n        state.searchText = action.payload;\n      },\n      prepare: event => ({\n        payload: event.target.value || ''\n      })\n    },\n    openNewContactDialog: (state, action) => {\n      state.contactDialog = {\n        type: 'new',\n        props: {\n          open: true\n        },\n        data: null\n      };\n    },\n    closeNewContactDialog: (state, action) => {\n      state.contactDialog = {\n        type: 'new',\n        props: {\n          open: false\n        },\n        data: null\n      };\n    },\n    openEditContactDialog: (state, action) => {\n      state.contactDialog = {\n        type: 'edit',\n        props: {\n          open: true\n        },\n        data: action.payload\n      };\n    },\n    closeEditContactDialog: (state, action) => {\n      state.contactDialog = {\n        type: 'edit',\n        props: {\n          open: false\n        },\n        data: null\n      };\n    }\n  },\n  extraReducers: {\n    [updateContact.fulfilled]: contactsAdapter.upsertOne,\n    [addContact.fulfilled]: contactsAdapter.addOne,\n    [getContacts.fulfilled]: (state, action) => {\n      const {\n        data,\n        routeParams\n      } = action.payload;\n      contactsAdapter.setAll(state, data);\n      state.routeParams = routeParams;\n      state.searchText = '';\n    }\n  }\n});\nexport const {\n  setContactsSearchText,\n  openNewContactDialog,\n  closeNewContactDialog,\n  openEditContactDialog,\n  closeEditContactDialog\n} = contactsSlice.actions;\nexport default contactsSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena_desarrollo/src/app/main/apps/gestiontercero/store/contactsSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","axios","getUserData","getContacts","routeParams","getState","contactsApp","contacts","response","get","params","data","addContact","contact","dispatch","post","updateContact","removeContact","contactId","removeContacts","contactIds","toggleStarredContact","toggleStarredContacts","setContactsStarred","setContactsUnstarred","contactsAdapter","selectAll","selectContacts","selectById","selectContactsById","getSelectors","state","contactsSlice","name","initialState","getInitialState","searchText","contactDialog","type","props","open","reducers","setContactsSearchText","reducer","action","payload","prepare","event","target","value","openNewContactDialog","closeNewContactDialog","openEditContactDialog","closeEditContactDialog","extraReducers","fulfilled","upsertOne","addOne","setAll","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { getUserData } from './userSlice';\n\nexport const getContacts = createAsyncThunk('contactsApp/gestiontercero/getContacts', async (routeParams, { getState }) => {\n\trouteParams = routeParams || getState().contactsApp.contacts.routeParams;\n\tconst response = await axios.get('/api/contacts-app/contacts', {\n\t\tparams: routeParams\n\t});\n\tconst data = await response.data;\n\n\treturn { data, routeParams };\n});\n\nexport const addContact = createAsyncThunk(\n\t'contactsApp/contacts/addContact',\n\tasync (contact, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/add-contact', { contact });\n\t\tconst data = await response.data;\n\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nexport const updateContact = createAsyncThunk(\n\t'contactsApp/contacts/updateContact',\n\tasync (contact, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/update-contact', { contact });\n\t\tconst data = await response.data;\n\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nexport const removeContact = createAsyncThunk(\n\t'contactsApp/contacts/removeContact',\n\tasync (contactId, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/remove-contact', { contactId });\n\t\tconst data = await response.data;\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nexport const removeContacts = createAsyncThunk(\n\t'contactsApp/contacts/removeContacts',\n\tasync (contactIds, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/remove-contacts', { contactIds });\n\t\tconst data = await response.data;\n\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nexport const toggleStarredContact = createAsyncThunk(\n\t'contactsApp/contacts/toggleStarredContact',\n\tasync (contactId, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/toggle-starred-contact', { contactId });\n\t\tconst data = await response.data;\n\n\t\tdispatch(getUserData());\n\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nexport const toggleStarredContacts = createAsyncThunk(\n\t'contactsApp/contacts/toggleStarredContacts',\n\tasync (contactIds, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/toggle-starred-contacts', { contactIds });\n\t\tconst data = await response.data;\n\n\t\tdispatch(getUserData());\n\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nexport const setContactsStarred = createAsyncThunk(\n\t'contactsApp/contacts/setContactsStarred',\n\tasync (contactIds, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/set-contacts-starred', { contactIds });\n\t\tconst data = await response.data;\n\n\t\tdispatch(getUserData());\n\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nexport const setContactsUnstarred = createAsyncThunk(\n\t'contactsApp/contacts/setContactsUnstarred',\n\tasync (contactIds, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/contacts-app/set-contacts-unstarred', { contactIds });\n\t\tconst data = await response.data;\n\n\t\tdispatch(getUserData());\n\n\t\tdispatch(getContacts());\n\n\t\treturn data;\n\t}\n);\n\nconst contactsAdapter = createEntityAdapter({});\n\nexport const { selectAll: selectContacts, selectById: selectContactsById } = contactsAdapter.getSelectors(\n\tstate => state.contactsApp.contacts\n);\n\nconst contactsSlice = createSlice({\n\tname: 'contactsApp/gestiontercero',\n\tinitialState: contactsAdapter.getInitialState({\n\t\tsearchText: '',\n\t\trouteParams: {},\n\t\tcontactDialog: {\n\t\t\ttype: 'new',\n\t\t\tprops: {\n\t\t\t\topen: false\n\t\t\t},\n\t\t\tdata: null\n\t\t}\n\t}),\n\treducers: {\n\t\tsetContactsSearchText: {\n\t\t\treducer: (state, action) => {\n\t\t\t\tstate.searchText = action.payload;\n\t\t\t},\n\t\t\tprepare: event => ({ payload: event.target.value || '' })\n\t\t},\n\t\topenNewContactDialog: (state, action) => {\n\t\t\tstate.contactDialog = {\n\t\t\t\ttype: 'new',\n\t\t\t\tprops: {\n\t\t\t\t\topen: true\n\t\t\t\t},\n\t\t\t\tdata: null\n\t\t\t};\n\t\t},\n\t\tcloseNewContactDialog: (state, action) => {\n\t\t\tstate.contactDialog = {\n\t\t\t\ttype: 'new',\n\t\t\t\tprops: {\n\t\t\t\t\topen: false\n\t\t\t\t},\n\t\t\t\tdata: null\n\t\t\t};\n\t\t},\n\t\topenEditContactDialog: (state, action) => {\n\t\t\tstate.contactDialog = {\n\t\t\t\ttype: 'edit',\n\t\t\t\tprops: {\n\t\t\t\t\topen: true\n\t\t\t\t},\n\t\t\t\tdata: action.payload\n\t\t\t};\n\t\t},\n\t\tcloseEditContactDialog: (state, action) => {\n\t\t\tstate.contactDialog = {\n\t\t\t\ttype: 'edit',\n\t\t\t\tprops: {\n\t\t\t\t\topen: false\n\t\t\t\t},\n\t\t\t\tdata: null\n\t\t\t};\n\t\t}\n\t},\n\textraReducers: {\n\t\t[updateContact.fulfilled]: contactsAdapter.upsertOne,\n\t\t[addContact.fulfilled]: contactsAdapter.addOne,\n\t\t[getContacts.fulfilled]: (state, action) => {\n\t\t\tconst { data, routeParams } = action.payload;\n\t\t\tcontactsAdapter.setAll(state, data);\n\t\t\tstate.routeParams = routeParams;\n\t\t\tstate.searchText = '';\n\t\t}\n\t}\n});\n\nexport const {\n\tsetContactsSearchText,\n\topenNewContactDialog,\n\tcloseNewContactDialog,\n\topenEditContactDialog,\n\tcloseEditContactDialog\n} = contactsSlice.actions;\n\nexport default contactsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}