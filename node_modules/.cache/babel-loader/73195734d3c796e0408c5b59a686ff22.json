{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport firebase from 'firebase';\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport jwtService from 'app/services/jwtService';\n/* export const setUserDataAuth0 = tokenData => async dispatch => {\n\tconst user = {\n\t\trole: ['admin'],\n\t\tfrom: 'auth0',\n\t\tdata: {\n\t\t\tdisplayName: tokenData.username || tokenData.name,\n\t\t\tphotoURL: tokenData.picture,\n\t\t\temail: tokenData.email,\n\t\t\tsettings:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.settings ? tokenData.user_metadata.settings : {},\n\t\t\tshortcuts:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.shortcuts ? tokenData.user_metadata.shortcuts : []\n\t\t}\n\t};\n\n\treturn dispatch(setUserData(user));\n}; */\n\nexport const setUserDataFirebase = (user, authUser) => async dispatch => {\n  if (user && user.data && user.data.settings && user.data.settings.theme && user.data.settings.layout && user.data.settings.layout.style) {\n    // Set user data but do not update\n    return dispatch(setUserData(user));\n  } // Create missing user settings\n\n\n  return dispatch(createUserSettingsFirebase(authUser));\n};\nexport const createUserSettingsFirebase = authUser => async (dispatch, getState) => {\n  const guestUser = getState().auth.user;\n  const fuseDefaultSettings = getState().fuse.settings.defaults;\n  const {\n    currentUser\n  } = firebase.auth();\n  /**\n   * Merge with current Settings\n   */\n\n  const user = _.merge({}, guestUser, {\n    uid: authUser.uid,\n    from: 'firebase',\n    role: ['admin'],\n    data: {\n      displayName: authUser.displayName,\n      email: authUser.email,\n      settings: { ...fuseDefaultSettings\n      }\n    }\n  });\n\n  currentUser.updateProfile(user.data);\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(user));\n};\nexport const setUserData = user => async (dispatch, getState) => {\n  /*\n         You can redirect the logged-in user to a specific route depending on his role\n          */\n  history.location.state = {\n    redirectUrl: '/apps/empresa' // for example 'apps/academy'\n\n  };\n  /*\n     Set User Settings\n      */\n\n  dispatch(setDefaultSettings(user.data.settings));\n  dispatch(setUser(user));\n};\nexport const updateUserSettings = settings => async (dispatch, getState) => {\n  const oldUser = getState().auth.user;\n\n  const user = _.merge({}, oldUser, {\n    data: {\n      settings\n    }\n  });\n\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(user));\n};\nexport const updateUserShortcuts = shortcuts => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n  const newUser = { ...user,\n    data: { ...user.data,\n      shortcuts\n    }\n  };\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(newUser));\n};\nexport const logoutUser = () => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return null;\n  }\n\n  history.push({\n    pathname: '/'\n  });\n\n  switch (user.from) {\n    default:\n      {\n        jwtService.logout();\n      }\n  }\n\n  dispatch(setInitialSettings());\n  dispatch(userLoggedOut());\n};\nexport const updateUserData = user => async (dispatch, getState) => {\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return;\n  }\n\n  switch (user.from) {\n    default:\n      {\n        jwtService.updateUserData(user).then(() => {\n          dispatch(showMessage({\n            message: 'User data saved with api'\n          }));\n        }).catch(error => {\n          dispatch(showMessage({\n            message: error.message\n          }));\n        });\n        break;\n      }\n  }\n};\nconst initialState = {\n  role: [],\n  // guest\n  data: {\n    displayName: 'John Doe',\n    photoURL: 'assets/images/avatars/Velazquez.jpg',\n    email: 'johndoe@withinpixels.com',\n    shortcuts: ['calendar', 'mail', 'contacts', 'todo']\n  }\n};\nconst userSlice = createSlice({\n  name: 'auth/user',\n  initialState,\n  reducers: {\n    setUser: (state, action) => action.payload,\n    userLoggedOut: (state, action) => initialState\n  },\n  extraReducers: {}\n});\nexport const {\n  setUser,\n  userLoggedOut\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena_desarrollo/src/app/auth/store/userSlice.js"],"names":["createSlice","firebase","history","_","setInitialSettings","setDefaultSettings","showMessage","jwtService","setUserDataFirebase","user","authUser","dispatch","data","settings","theme","layout","style","setUserData","createUserSettingsFirebase","getState","guestUser","auth","fuseDefaultSettings","fuse","defaults","currentUser","merge","uid","from","role","displayName","email","updateProfile","updateUserData","location","state","redirectUrl","setUser","updateUserSettings","oldUser","updateUserShortcuts","shortcuts","newUser","logoutUser","length","push","pathname","logout","userLoggedOut","then","message","catch","error","initialState","photoURL","userSlice","name","reducers","action","payload","extraReducers","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,8BAAvD;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB,MAAMC,QAAN,IAAkB;AACxE,MACCF,IAAI,IACJA,IAAI,CAACG,IADL,IAEAH,IAAI,CAACG,IAAL,CAAUC,QAFV,IAGAJ,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBC,KAHnB,IAIAL,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBE,MAJnB,IAKAN,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBE,MAAnB,CAA0BC,KAN3B,EAOE;AACD;AACA,WAAOL,QAAQ,CAACM,WAAW,CAACR,IAAD,CAAZ,CAAf;AACA,GAXuE,CAaxE;;;AACA,SAAOE,QAAQ,CAACO,0BAA0B,CAACR,QAAD,CAA3B,CAAf;AACA,CAfM;AAiBP,OAAO,MAAMQ,0BAA0B,GAAGR,QAAQ,IAAI,OAAOC,QAAP,EAAiBQ,QAAjB,KAA8B;AACnF,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBZ,IAAlC;AACA,QAAMa,mBAAmB,GAAGH,QAAQ,GAAGI,IAAX,CAAgBV,QAAhB,CAAyBW,QAArD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBxB,QAAQ,CAACoB,IAAT,EAAxB;AAEA;AACD;AACA;;AACC,QAAMZ,IAAI,GAAGN,CAAC,CAACuB,KAAF,CAAQ,EAAR,EAAYN,SAAZ,EAAuB;AACnCO,IAAAA,GAAG,EAAEjB,QAAQ,CAACiB,GADqB;AAEnCC,IAAAA,IAAI,EAAE,UAF6B;AAGnCC,IAAAA,IAAI,EAAE,CAAC,OAAD,CAH6B;AAInCjB,IAAAA,IAAI,EAAE;AACLkB,MAAAA,WAAW,EAAEpB,QAAQ,CAACoB,WADjB;AAELC,MAAAA,KAAK,EAAErB,QAAQ,CAACqB,KAFX;AAGLlB,MAAAA,QAAQ,EAAE,EAAE,GAAGS;AAAL;AAHL;AAJ6B,GAAvB,CAAb;;AAUAG,EAAAA,WAAW,CAACO,aAAZ,CAA0BvB,IAAI,CAACG,IAA/B;AAEAD,EAAAA,QAAQ,CAACsB,cAAc,CAACxB,IAAD,CAAf,CAAR;AAEA,SAAOE,QAAQ,CAACM,WAAW,CAACR,IAAD,CAAZ,CAAf;AACA,CAvBM;AAyBP,OAAO,MAAMQ,WAAW,GAAGR,IAAI,IAAI,OAAOE,QAAP,EAAiBQ,QAAjB,KAA8B;AAChE;AACD;AACA;AAECjB,EAAAA,OAAO,CAACgC,QAAR,CAAiBC,KAAjB,GAAyB;AACxBC,IAAAA,WAAW,EAAE,eADW,CACK;;AADL,GAAzB;AAIA;AACD;AACA;;AAECzB,EAAAA,QAAQ,CAACN,kBAAkB,CAACI,IAAI,CAACG,IAAL,CAAUC,QAAX,CAAnB,CAAR;AAEAF,EAAAA,QAAQ,CAAC0B,OAAO,CAAC5B,IAAD,CAAR,CAAR;AACA,CAhBM;AAkBP,OAAO,MAAM6B,kBAAkB,GAAGzB,QAAQ,IAAI,OAAOF,QAAP,EAAiBQ,QAAjB,KAA8B;AAC3E,QAAMoB,OAAO,GAAGpB,QAAQ,GAAGE,IAAX,CAAgBZ,IAAhC;;AACA,QAAMA,IAAI,GAAGN,CAAC,CAACuB,KAAF,CAAQ,EAAR,EAAYa,OAAZ,EAAqB;AAAE3B,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAArB,CAAb;;AAEAF,EAAAA,QAAQ,CAACsB,cAAc,CAACxB,IAAD,CAAf,CAAR;AAEA,SAAOE,QAAQ,CAACM,WAAW,CAACR,IAAD,CAAZ,CAAf;AACA,CAPM;AASP,OAAO,MAAM+B,mBAAmB,GAAGC,SAAS,IAAI,OAAO9B,QAAP,EAAiBQ,QAAjB,KAA8B;AAC7E,QAAM;AAAEV,IAAAA;AAAF,MAAWU,QAAQ,GAAGE,IAA5B;AACA,QAAMqB,OAAO,GAAG,EACf,GAAGjC,IADY;AAEfG,IAAAA,IAAI,EAAE,EACL,GAAGH,IAAI,CAACG,IADH;AAEL6B,MAAAA;AAFK;AAFS,GAAhB;AAQA9B,EAAAA,QAAQ,CAACsB,cAAc,CAACxB,IAAD,CAAf,CAAR;AAEA,SAAOE,QAAQ,CAACM,WAAW,CAACyB,OAAD,CAAZ,CAAf;AACA,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,MAAM,OAAOhC,QAAP,EAAiBQ,QAAjB,KAA8B;AAC7D,QAAM;AAAEV,IAAAA;AAAF,MAAWU,QAAQ,GAAGE,IAA5B;;AAEA,MAAI,CAACZ,IAAI,CAACoB,IAAN,IAAcpB,IAAI,CAACoB,IAAL,CAAUe,MAAV,KAAqB,CAAvC,EAA0C;AACzC;AACA,WAAO,IAAP;AACA;;AAED1C,EAAAA,OAAO,CAAC2C,IAAR,CAAa;AACZC,IAAAA,QAAQ,EAAE;AADE,GAAb;;AAIA,UAAQrC,IAAI,CAACmB,IAAb;AACC;AAAS;AACRrB,QAAAA,UAAU,CAACwC,MAAX;AACA;AAHF;;AAMApC,EAAAA,QAAQ,CAACP,kBAAkB,EAAnB,CAAR;AAEAO,EAAAA,QAAQ,CAACqC,aAAa,EAAd,CAAR;AACA,CArBM;AAuBP,OAAO,MAAMf,cAAc,GAAGxB,IAAI,IAAI,OAAOE,QAAP,EAAiBQ,QAAjB,KAA8B;AACnE,MAAI,CAACV,IAAI,CAACoB,IAAN,IAAcpB,IAAI,CAACoB,IAAL,CAAUe,MAAV,KAAqB,CAAvC,EAA0C;AACzC;AACA;AACA;;AAED,UAAQnC,IAAI,CAACmB,IAAb;AACC;AAAS;AACRrB,QAAAA,UAAU,CACR0B,cADF,CACiBxB,IADjB,EAEEwC,IAFF,CAEO,MAAM;AACXtC,UAAAA,QAAQ,CAACL,WAAW,CAAC;AAAE4C,YAAAA,OAAO,EAAE;AAAX,WAAD,CAAZ,CAAR;AACA,SAJF,EAKEC,KALF,CAKQC,KAAK,IAAI;AACfzC,UAAAA,QAAQ,CAACL,WAAW,CAAC;AAAE4C,YAAAA,OAAO,EAAEE,KAAK,CAACF;AAAjB,WAAD,CAAZ,CAAR;AACA,SAPF;AAQA;AACA;AAXF;AAaA,CAnBM;AAqBP,MAAMG,YAAY,GAAG;AACpBxB,EAAAA,IAAI,EAAE,EADc;AACV;AACVjB,EAAAA,IAAI,EAAE;AACLkB,IAAAA,WAAW,EAAE,UADR;AAELwB,IAAAA,QAAQ,EAAE,qCAFL;AAGLvB,IAAAA,KAAK,EAAE,0BAHF;AAILU,IAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,MAAb,EAAqB,UAArB,EAAiC,MAAjC;AAJN;AAFc,CAArB;AAUA,MAAMc,SAAS,GAAGvD,WAAW,CAAC;AAC7BwD,EAAAA,IAAI,EAAE,WADuB;AAE7BH,EAAAA,YAF6B;AAG7BI,EAAAA,QAAQ,EAAE;AACTpB,IAAAA,OAAO,EAAE,CAACF,KAAD,EAAQuB,MAAR,KAAmBA,MAAM,CAACC,OAD1B;AAETX,IAAAA,aAAa,EAAE,CAACb,KAAD,EAAQuB,MAAR,KAAmBL;AAFzB,GAHmB;AAO7BO,EAAAA,aAAa,EAAE;AAPc,CAAD,CAA7B;AAUA,OAAO,MAAM;AAAEvB,EAAAA,OAAF;AAAWW,EAAAA;AAAX,IAA6BO,SAAS,CAACM,OAA7C;AAEP,eAAeN,SAAS,CAACO,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport firebase from 'firebase';\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport jwtService from 'app/services/jwtService';\n\n/* export const setUserDataAuth0 = tokenData => async dispatch => {\n\tconst user = {\n\t\trole: ['admin'],\n\t\tfrom: 'auth0',\n\t\tdata: {\n\t\t\tdisplayName: tokenData.username || tokenData.name,\n\t\t\tphotoURL: tokenData.picture,\n\t\t\temail: tokenData.email,\n\t\t\tsettings:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.settings ? tokenData.user_metadata.settings : {},\n\t\t\tshortcuts:\n\t\t\t\ttokenData.user_metadata && tokenData.user_metadata.shortcuts ? tokenData.user_metadata.shortcuts : []\n\t\t}\n\t};\n\n\treturn dispatch(setUserData(user));\n}; */\n\nexport const setUserDataFirebase = (user, authUser) => async dispatch => {\n\tif (\n\t\tuser &&\n\t\tuser.data &&\n\t\tuser.data.settings &&\n\t\tuser.data.settings.theme &&\n\t\tuser.data.settings.layout &&\n\t\tuser.data.settings.layout.style\n\t) {\n\t\t// Set user data but do not update\n\t\treturn dispatch(setUserData(user));\n\t}\n\n\t// Create missing user settings\n\treturn dispatch(createUserSettingsFirebase(authUser));\n};\n\nexport const createUserSettingsFirebase = authUser => async (dispatch, getState) => {\n\tconst guestUser = getState().auth.user;\n\tconst fuseDefaultSettings = getState().fuse.settings.defaults;\n\tconst { currentUser } = firebase.auth();\n\n\t/**\n\t * Merge with current Settings\n\t */\n\tconst user = _.merge({}, guestUser, {\n\t\tuid: authUser.uid,\n\t\tfrom: 'firebase',\n\t\trole: ['admin'],\n\t\tdata: {\n\t\t\tdisplayName: authUser.displayName,\n\t\t\temail: authUser.email,\n\t\t\tsettings: { ...fuseDefaultSettings }\n\t\t}\n\t});\n\tcurrentUser.updateProfile(user.data);\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(user));\n};\n\nexport const setUserData = user => async (dispatch, getState) => {\n\t/*\n        You can redirect the logged-in user to a specific route depending on his role\n         */\n\n\thistory.location.state = {\n\t\tredirectUrl: '/apps/empresa' // for example 'apps/academy'\n\t};\n\n\t/*\n    Set User Settings\n     */\n\t\n\tdispatch(setDefaultSettings(user.data.settings));\n\n\tdispatch(setUser(user));\n};\n\nexport const updateUserSettings = settings => async (dispatch, getState) => {\n\tconst oldUser = getState().auth.user;\n\tconst user = _.merge({}, oldUser, { data: { settings } });\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(user));\n};\n\nexport const updateUserShortcuts = shortcuts => async (dispatch, getState) => {\n\tconst { user } = getState().auth;\n\tconst newUser = {\n\t\t...user,\n\t\tdata: {\n\t\t\t...user.data,\n\t\t\tshortcuts\n\t\t}\n\t};\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(newUser));\n};\n\nexport const logoutUser = () => async (dispatch, getState) => {\n\tconst { user } = getState().auth;\n\n\tif (!user.role || user.role.length === 0) {\n\t\t// is guest\n\t\treturn null;\n\t}\n\n\thistory.push({\n\t\tpathname: '/'\n\t});\n\n\tswitch (user.from) {\n\t\tdefault: {\n\t\t\tjwtService.logout();\n\t\t}\n\t}\n\n\tdispatch(setInitialSettings());\n\n\tdispatch(userLoggedOut());\n};\n\nexport const updateUserData = user => async (dispatch, getState) => {\n\tif (!user.role || user.role.length === 0) {\n\t\t// is guest\n\t\treturn;\n\t}\n\t\n\tswitch (user.from) {\n\t\tdefault: {\n\t\t\tjwtService\n\t\t\t\t.updateUserData(user)\n\t\t\t\t.then(() => {\n\t\t\t\t\tdispatch(showMessage({ message: 'User data saved with api' }));\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t}\n};\n\nconst initialState = {\n\trole: [], // guest\n\tdata: {\n\t\tdisplayName: 'John Doe',\n\t\tphotoURL: 'assets/images/avatars/Velazquez.jpg',\n\t\temail: 'johndoe@withinpixels.com',\n\t\tshortcuts: ['calendar', 'mail', 'contacts', 'todo']\n\t}\n};\n\nconst userSlice = createSlice({\n\tname: 'auth/user',\n\tinitialState,\n\treducers: {\n\t\tsetUser: (state, action) => action.payload,\n\t\tuserLoggedOut: (state, action) => initialState\n\t},\n\textraReducers: {}\n});\n\nexport const { setUser, userLoggedOut } = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}