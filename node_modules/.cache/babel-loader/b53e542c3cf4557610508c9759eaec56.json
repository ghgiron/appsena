{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getMails = createAsyncThunk('mailApp/mails/getMails', async (routeParams, {\n  getState\n}) => {\n  routeParams = routeParams || getState().mailApp.mails.routeParams;\n  const response = await axios.get('/api/mail-app/mails', {\n    params: routeParams\n  });\n  const data = await response.data;\n  return {\n    data,\n    routeParams\n  };\n});\nexport const setFolderOnSelectedMails = createAsyncThunk('mailApp/mails/setFolderOnSelectedMails', async (id, {\n  dispatch,\n  getState\n}) => {\n  const {\n    selectedMailIds\n  } = getState().mailApp.mails;\n  const response = await axios.post('/api/mail-app/set-folder', {\n    selectedMailIds,\n    folderId: id\n  });\n  const data = await response.data;\n  dispatch(getMails());\n  return data;\n});\nexport const toggleLabelOnSelectedMails = createAsyncThunk('mailApp/mails/toggleLabelOnSelectedMails', async (id, {\n  dispatch,\n  getState\n}) => {\n  const {\n    selectedMailIds\n  } = getState().mailApp.mails;\n  const response = await axios.post('/api/mail-app/toggle-label', {\n    selectedMailIds,\n    labelId: id\n  });\n  const data = await response.data;\n  dispatch(getMails());\n  return data;\n});\nconst mailsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectMails,\n  selectById: selectMailById\n} = mailsAdapter.getSelectors(state => state.mailApp.mails);\nconst mailsSlice = createSlice({\n  name: 'mailApp/mails',\n  initialState: mailsAdapter.getInitialState({\n    searchText: '',\n    routeParams: {},\n    selectedMailIds: []\n  }),\n  reducers: {\n    setMailsSearchText: {\n      reducer: (state, action) => {\n        state.searchText = action.payload;\n      },\n      prepare: event => ({\n        payload: event.target.value || ''\n      })\n    },\n    selectAllMails: (state, action) => {\n      state.selectedMailIds = state.ids;\n    },\n    deselectAllMails: (state, action) => {\n      state.selectedMailIds = [];\n    },\n    selectMailsByParameter: (state, action) => {\n      const [parameter, value] = action.payload;\n      state.selectedMailIds = state.ids.filter(id => state.entities[id][parameter] === value);\n    },\n    toggleInSelectedMails: (state, action) => {\n      const mailId = action.payload;\n      state.selectedMailIds = state.selectedMailIds.includes(mailId) ? state.selectedMailIds.filter(id => id !== mailId) : [...state.selectedMailIds, mailId];\n    }\n  },\n  extraReducers: {\n    [getMails.fulfilled]: (state, action) => {\n      const {\n        data,\n        routeParams\n      } = action.payload;\n      mailsAdapter.setAll(state, data);\n      state.routeParams = routeParams;\n      state.selectedMailIds = [];\n    }\n  }\n});\nexport const {\n  setMailsSearchText,\n  selectAllMails,\n  deselectAllMails,\n  selectMailsByParameter,\n  toggleInSelectedMails\n} = mailsSlice.actions;\nexport default mailsSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/mail/store/mailsSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","axios","getMails","routeParams","getState","mailApp","mails","response","get","params","data","setFolderOnSelectedMails","id","dispatch","selectedMailIds","post","folderId","toggleLabelOnSelectedMails","labelId","mailsAdapter","selectAll","selectMails","selectById","selectMailById","getSelectors","state","mailsSlice","name","initialState","getInitialState","searchText","reducers","setMailsSearchText","reducer","action","payload","prepare","event","target","value","selectAllMails","ids","deselectAllMails","selectMailsByParameter","parameter","filter","entities","toggleInSelectedMails","mailId","includes","extraReducers","fulfilled","setAll","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getMails = createAsyncThunk('mailApp/mails/getMails', async (routeParams, { getState }) => {\n\trouteParams = routeParams || getState().mailApp.mails.routeParams;\n\tconst response = await axios.get('/api/mail-app/mails', {\n\t\tparams: routeParams\n\t});\n\tconst data = await response.data;\n\n\treturn { data, routeParams };\n});\n\nexport const setFolderOnSelectedMails = createAsyncThunk(\n\t'mailApp/mails/setFolderOnSelectedMails',\n\tasync (id, { dispatch, getState }) => {\n\t\tconst { selectedMailIds } = getState().mailApp.mails;\n\n\t\tconst response = await axios.post('/api/mail-app/set-folder', {\n\t\t\tselectedMailIds,\n\t\t\tfolderId: id\n\t\t});\n\t\tconst data = await response.data;\n\n\t\tdispatch(getMails());\n\n\t\treturn data;\n\t}\n);\n\nexport const toggleLabelOnSelectedMails = createAsyncThunk(\n\t'mailApp/mails/toggleLabelOnSelectedMails',\n\tasync (id, { dispatch, getState }) => {\n\t\tconst { selectedMailIds } = getState().mailApp.mails;\n\n\t\tconst response = await axios.post('/api/mail-app/toggle-label', {\n\t\t\tselectedMailIds,\n\t\t\tlabelId: id\n\t\t});\n\t\tconst data = await response.data;\n\n\t\tdispatch(getMails());\n\n\t\treturn data;\n\t}\n);\n\nconst mailsAdapter = createEntityAdapter({});\n\nexport const { selectAll: selectMails, selectById: selectMailById } = mailsAdapter.getSelectors(\n\tstate => state.mailApp.mails\n);\n\nconst mailsSlice = createSlice({\n\tname: 'mailApp/mails',\n\tinitialState: mailsAdapter.getInitialState({\n\t\tsearchText: '',\n\t\trouteParams: {},\n\t\tselectedMailIds: []\n\t}),\n\treducers: {\n\t\tsetMailsSearchText: {\n\t\t\treducer: (state, action) => {\n\t\t\t\tstate.searchText = action.payload;\n\t\t\t},\n\t\t\tprepare: event => ({ payload: event.target.value || '' })\n\t\t},\n\t\tselectAllMails: (state, action) => {\n\t\t\tstate.selectedMailIds = state.ids;\n\t\t},\n\t\tdeselectAllMails: (state, action) => {\n\t\t\tstate.selectedMailIds = [];\n\t\t},\n\t\tselectMailsByParameter: (state, action) => {\n\t\t\tconst [parameter, value] = action.payload;\n\t\t\tstate.selectedMailIds = state.ids.filter(id => state.entities[id][parameter] === value);\n\t\t},\n\t\ttoggleInSelectedMails: (state, action) => {\n\t\t\tconst mailId = action.payload;\n\t\t\tstate.selectedMailIds = state.selectedMailIds.includes(mailId)\n\t\t\t\t? state.selectedMailIds.filter(id => id !== mailId)\n\t\t\t\t: [...state.selectedMailIds, mailId];\n\t\t}\n\t},\n\textraReducers: {\n\t\t[getMails.fulfilled]: (state, action) => {\n\t\t\tconst { data, routeParams } = action.payload;\n\t\t\tmailsAdapter.setAll(state, data);\n\t\t\tstate.routeParams = routeParams;\n\t\t\tstate.selectedMailIds = [];\n\t\t}\n\t}\n});\n\nexport const {\n\tsetMailsSearchText,\n\tselectAllMails,\n\tdeselectAllMails,\n\tselectMailsByParameter,\n\ttoggleInSelectedMails\n} = mailsSlice.actions;\n\nexport default mailsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}