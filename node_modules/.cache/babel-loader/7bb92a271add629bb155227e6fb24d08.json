{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport CardModel from '../model/CardModel';\nimport ListModel from '../model/ListModel';\nimport reorder, { reorderQuoteMap } from './reorder';\nimport { newBoard } from './boardsSlice';\nimport { removeCard, updateCard } from './cardSlice';\nexport const getBoard = createAsyncThunk('scrumboardApp/board/getBoard', async (params, {\n  dispatch\n}) => {\n  try {\n    const response = await axios.get('/api/scrumboard-app/board', {\n      params\n    });\n    const data = await response.data;\n    return data;\n  } catch (error) {\n    dispatch(showMessage({\n      message: error.response.data,\n      autoHideDuration: 2000,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    }));\n    history.push({\n      pathname: '/apps/scrumboard/boards'\n    });\n    return null;\n  }\n});\nexport const reorderList = createAsyncThunk('scrumboardApp/board/reorderList', async (result, {\n  dispatch,\n  getState\n}) => {\n  const {\n    board\n  } = getState().scrumboardApp;\n  const {\n    lists\n  } = board;\n  const ordered = reorder(_.merge([], lists), result.source.index, result.destination.index);\n  const response = await axios.post('/api/scrumboard-app/list/order', {\n    boardId: board.id,\n    lists: ordered\n  });\n  const data = await response.data;\n  dispatch(showMessage({\n    message: 'List Order Saved',\n    autoHideDuration: 2000,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    }\n  }));\n  return data;\n});\nexport const reorderCard = createAsyncThunk('scrumboardApp/board/reorderCard', async ({\n  source,\n  destination\n}, {\n  dispatch,\n  getState\n}) => {\n  const {\n    board\n  } = getState().scrumboardApp;\n  const {\n    lists\n  } = board;\n  const ordered = reorderQuoteMap(_.merge([], lists), source, destination);\n  const response = await axios.post('/api/scrumboard-app/card/order', {\n    boardId: board.id,\n    lists: ordered\n  });\n  const data = await response.data;\n  dispatch(showMessage({\n    message: 'Card Order Saved',\n    autoHideDuration: 2000,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    }\n  }));\n  return data;\n});\nexport const newCard = createAsyncThunk('scrumboardApp/board/newCard', async ({\n  boardId,\n  listId,\n  cardTitle\n}, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/scrumboard-app/card/new', {\n    boardId,\n    listId,\n    data: new CardModel({\n      name: cardTitle\n    })\n  });\n  const data = await response.data;\n  return data;\n});\nexport const newList = createAsyncThunk('scrumboardApp/board/newList', async ({\n  boardId,\n  listTitle\n}, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/scrumboard-app/list/new', {\n    boardId,\n    data: new ListModel({\n      name: listTitle\n    })\n  });\n  const data = await response.data;\n  return data;\n});\nexport const renameList = createAsyncThunk('scrumboardApp/board/renameList', async ({\n  boardId,\n  listId,\n  listTitle\n}, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/scrumboard-app/list/rename', {\n    boardId,\n    listId,\n    listTitle\n  });\n  const data = await response.data;\n  return data;\n});\nexport const removeList = createAsyncThunk('scrumboardApp/board/removeList', async ({\n  boardId,\n  listId\n}, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/scrumboard-app/list/remove', {\n    boardId,\n    listId\n  });\n  const data = await response.data;\n  return data;\n});\nexport const changeBoardSettings = createAsyncThunk('scrumboardApp/board/changeBoardSettings', async (newSettings, {\n  dispatch,\n  getState\n}) => {\n  const {\n    board\n  } = getState().scrumboardApp;\n\n  const settings = _.merge({}, board.settings, newSettings);\n\n  const response = await axios.post('/api/scrumboard-app/board/settings/update', {\n    boardId: board.id,\n    settings\n  });\n  const data = await response.data;\n  return data;\n});\nexport const deleteBoard = createAsyncThunk('scrumboardApp/board/deleteBoard', async (boardId, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/scrumboard-app/board/delete', {\n    boardId\n  });\n  history.push({\n    pathname: '/apps/scrumboard/boards'\n  });\n  const data = await response.data;\n  return data;\n});\nexport const copyBoard = createAsyncThunk('scrumboardApp/board/copyBoard', async (board, {\n  dispatch,\n  getState\n}) => {\n  const newBoardData = _.merge({}, board, {\n    id: FuseUtils.generateGUID(),\n    name: `${board.name} (Copied)`,\n    uri: `${board.uri}-copied`\n  });\n\n  dispatch(newBoard(newBoardData));\n  return newBoardData;\n});\nexport const renameBoard = createAsyncThunk('scrumboardApp/board/renameBoard', async ({\n  boardId,\n  boardTitle\n}, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/scrumboard-app/board/rename', {\n    boardId,\n    boardTitle\n  });\n  const data = await response.data;\n  return data;\n});\nconst boardsSlice = createSlice({\n  name: 'scrumboardApp/boards',\n  initialState: null,\n  reducers: {\n    resetBoard: (state, action) => null,\n    addLabel: (state, action) => {\n      state.labels = [...state.labels, action.payload];\n    }\n  },\n  extraReducers: {\n    [getBoard.fulfilled]: (state, action) => action.payload,\n    [reorderList.fulfilled]: (state, action) => {\n      state.lists = action.payload;\n    },\n    [reorderCard.fulfilled]: (state, action) => {\n      state.lists = action.payload;\n    },\n    [newList.fulfilled]: (state, action) => {\n      state.lists = action.payload;\n    },\n    [newCard.fulfilled]: (state, action) => action.payload,\n    [renameList.fulfilled]: (state, action) => {\n      const {\n        listId,\n        listTitle\n      } = action.payload;\n      state.lists = state.lists.map(list => {\n        if (list.id === listId) {\n          list.name = listTitle;\n        }\n\n        return list;\n      });\n    },\n    [removeList.fulfilled]: (state, action) => {\n      state.lists = _.reject(state.lists, {\n        id: action.payload\n      });\n    },\n    [changeBoardSettings.fulfilled]: (state, action) => {\n      state.settings = action.payload;\n    },\n    [deleteBoard.fulfilled]: (state, action) => {\n      state = {};\n    },\n    [renameBoard.fulfilled]: (state, action) => {\n      state.name = action.payload;\n    },\n    [updateCard.fulfilled.type]: (state, action) => {\n      state.cards = state.cards.map(_card => {\n        if (_card.id === action.payload.id) {\n          return action.payload;\n        }\n\n        return _card;\n      });\n    },\n    [removeCard.fulfilled]: (state, action) => {\n      const cardId = action.payload;\n      state.cards = _.reject(state.cards, {\n        id: cardId\n      });\n      state.lists = state.lists.map(list => {\n        _.set(list, 'idCards', _.reject(list.idCards, id => id === cardId));\n\n        return list;\n      });\n    }\n  }\n});\nexport const {\n  resetBoard,\n  addLabel\n} = boardsSlice.actions;\nexport default boardsSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/scrumboard/store/boardSlice.js"],"names":["createSlice","createAsyncThunk","axios","FuseUtils","history","_","showMessage","CardModel","ListModel","reorder","reorderQuoteMap","newBoard","removeCard","updateCard","getBoard","params","dispatch","response","get","data","error","message","autoHideDuration","anchorOrigin","vertical","horizontal","push","pathname","reorderList","result","getState","board","scrumboardApp","lists","ordered","merge","source","index","destination","post","boardId","id","reorderCard","newCard","listId","cardTitle","name","newList","listTitle","renameList","removeList","changeBoardSettings","newSettings","settings","deleteBoard","copyBoard","newBoardData","generateGUID","uri","renameBoard","boardTitle","boardsSlice","initialState","reducers","resetBoard","state","action","addLabel","labels","payload","extraReducers","fulfilled","map","list","reject","type","cards","_card","cardId","set","idCards","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport CardModel from '../model/CardModel';\nimport ListModel from '../model/ListModel';\nimport reorder, { reorderQuoteMap } from './reorder';\nimport { newBoard } from './boardsSlice';\nimport { removeCard, updateCard } from './cardSlice';\n\nexport const getBoard = createAsyncThunk('scrumboardApp/board/getBoard', async (params, { dispatch }) => {\n\ttry {\n\t\tconst response = await axios.get('/api/scrumboard-app/board', { params });\n\t\tconst data = await response.data;\n\t\treturn data;\n\t} catch (error) {\n\t\tdispatch(\n\t\t\tshowMessage({\n\t\t\t\tmessage: error.response.data,\n\t\t\t\tautoHideDuration: 2000,\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right'\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\thistory.push({\n\t\t\tpathname: '/apps/scrumboard/boards'\n\t\t});\n\t\treturn null;\n\t}\n});\n\nexport const reorderList = createAsyncThunk(\n\t'scrumboardApp/board/reorderList',\n\tasync (result, { dispatch, getState }) => {\n\t\tconst { board } = getState().scrumboardApp;\n\t\tconst { lists } = board;\n\n\t\tconst ordered = reorder(_.merge([], lists), result.source.index, result.destination.index);\n\n\t\tconst response = await axios.post('/api/scrumboard-app/list/order', {\n\t\t\tboardId: board.id,\n\t\t\tlists: ordered\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\tdispatch(\n\t\t\tshowMessage({\n\t\t\t\tmessage: 'List Order Saved',\n\t\t\t\tautoHideDuration: 2000,\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right'\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\treturn data;\n\t}\n);\n\nexport const reorderCard = createAsyncThunk(\n\t'scrumboardApp/board/reorderCard',\n\tasync ({ source, destination }, { dispatch, getState }) => {\n\t\tconst { board } = getState().scrumboardApp;\n\t\tconst { lists } = board;\n\n\t\tconst ordered = reorderQuoteMap(_.merge([], lists), source, destination);\n\n\t\tconst response = await axios.post('/api/scrumboard-app/card/order', {\n\t\t\tboardId: board.id,\n\t\t\tlists: ordered\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\tdispatch(\n\t\t\tshowMessage({\n\t\t\t\tmessage: 'Card Order Saved',\n\t\t\t\tautoHideDuration: 2000,\n\t\t\t\tanchorOrigin: {\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'right'\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\treturn data;\n\t}\n);\n\nexport const newCard = createAsyncThunk(\n\t'scrumboardApp/board/newCard',\n\tasync ({ boardId, listId, cardTitle }, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/scrumboard-app/card/new', {\n\t\t\tboardId,\n\t\t\tlistId,\n\t\t\tdata: new CardModel({ name: cardTitle })\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\treturn data;\n\t}\n);\n\nexport const newList = createAsyncThunk(\n\t'scrumboardApp/board/newList',\n\tasync ({ boardId, listTitle }, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/scrumboard-app/list/new', {\n\t\t\tboardId,\n\t\t\tdata: new ListModel({ name: listTitle })\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\treturn data;\n\t}\n);\n\nexport const renameList = createAsyncThunk(\n\t'scrumboardApp/board/renameList',\n\tasync ({ boardId, listId, listTitle }, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/scrumboard-app/list/rename', {\n\t\t\tboardId,\n\t\t\tlistId,\n\t\t\tlistTitle\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\treturn data;\n\t}\n);\n\nexport const removeList = createAsyncThunk(\n\t'scrumboardApp/board/removeList',\n\tasync ({ boardId, listId }, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/scrumboard-app/list/remove', {\n\t\t\tboardId,\n\t\t\tlistId\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\treturn data;\n\t}\n);\n\nexport const changeBoardSettings = createAsyncThunk(\n\t'scrumboardApp/board/changeBoardSettings',\n\tasync (newSettings, { dispatch, getState }) => {\n\t\tconst { board } = getState().scrumboardApp;\n\t\tconst settings = _.merge({}, board.settings, newSettings);\n\n\t\tconst response = await axios.post('/api/scrumboard-app/board/settings/update', {\n\t\t\tboardId: board.id,\n\t\t\tsettings\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\treturn data;\n\t}\n);\n\nexport const deleteBoard = createAsyncThunk(\n\t'scrumboardApp/board/deleteBoard',\n\tasync (boardId, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/scrumboard-app/board/delete', {\n\t\t\tboardId\n\t\t});\n\n\t\thistory.push({\n\t\t\tpathname: '/apps/scrumboard/boards'\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\treturn data;\n\t}\n);\n\nexport const copyBoard = createAsyncThunk('scrumboardApp/board/copyBoard', async (board, { dispatch, getState }) => {\n\tconst newBoardData = _.merge({}, board, {\n\t\tid: FuseUtils.generateGUID(),\n\t\tname: `${board.name} (Copied)`,\n\t\turi: `${board.uri}-copied`\n\t});\n\n\tdispatch(newBoard(newBoardData));\n\n\treturn newBoardData;\n});\n\nexport const renameBoard = createAsyncThunk(\n\t'scrumboardApp/board/renameBoard',\n\tasync ({ boardId, boardTitle }, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/scrumboard-app/board/rename', {\n\t\t\tboardId,\n\t\t\tboardTitle\n\t\t});\n\n\t\tconst data = await response.data;\n\n\t\treturn data;\n\t}\n);\n\nconst boardsSlice = createSlice({\n\tname: 'scrumboardApp/boards',\n\tinitialState: null,\n\treducers: {\n\t\tresetBoard: (state, action) => null,\n\t\taddLabel: (state, action) => {\n\t\t\tstate.labels = [...state.labels, action.payload];\n\t\t}\n\t},\n\textraReducers: {\n\t\t[getBoard.fulfilled]: (state, action) => action.payload,\n\t\t[reorderList.fulfilled]: (state, action) => {\n\t\t\tstate.lists = action.payload;\n\t\t},\n\t\t[reorderCard.fulfilled]: (state, action) => {\n\t\t\tstate.lists = action.payload;\n\t\t},\n\t\t[newList.fulfilled]: (state, action) => {\n\t\t\tstate.lists = action.payload;\n\t\t},\n\t\t[newCard.fulfilled]: (state, action) => action.payload,\n\t\t[renameList.fulfilled]: (state, action) => {\n\t\t\tconst { listId, listTitle } = action.payload;\n\t\t\tstate.lists = state.lists.map(list => {\n\t\t\t\tif (list.id === listId) {\n\t\t\t\t\tlist.name = listTitle;\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\t[removeList.fulfilled]: (state, action) => {\n\t\t\tstate.lists = _.reject(state.lists, { id: action.payload });\n\t\t},\n\t\t[changeBoardSettings.fulfilled]: (state, action) => {\n\t\t\tstate.settings = action.payload;\n\t\t},\n\t\t[deleteBoard.fulfilled]: (state, action) => {\n\t\t\tstate = {};\n\t\t},\n\t\t[renameBoard.fulfilled]: (state, action) => {\n\t\t\tstate.name = action.payload;\n\t\t},\n\t\t[updateCard.fulfilled.type]: (state, action) => {\n\t\t\tstate.cards = state.cards.map(_card => {\n\t\t\t\tif (_card.id === action.payload.id) {\n\t\t\t\t\treturn action.payload;\n\t\t\t\t}\n\t\t\t\treturn _card;\n\t\t\t});\n\t\t},\n\t\t[removeCard.fulfilled]: (state, action) => {\n\t\t\tconst cardId = action.payload;\n\t\t\tstate.cards = _.reject(state.cards, { id: cardId });\n\t\t\tstate.lists = state.lists.map(list => {\n\t\t\t\t_.set(\n\t\t\t\t\tlist,\n\t\t\t\t\t'idCards',\n\t\t\t\t\t_.reject(list.idCards, id => id === cardId)\n\t\t\t\t);\n\t\t\t\treturn list;\n\t\t\t});\n\t\t}\n\t}\n});\n\nexport const { resetBoard, addLabel } = boardsSlice.actions;\n\nexport default boardsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}