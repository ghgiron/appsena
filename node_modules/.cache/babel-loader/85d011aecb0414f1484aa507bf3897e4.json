{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { setSelectedContactId } from './contactsSlice';\nimport { closeMobileChatsSidebar } from './sidebarsSlice';\nimport { updateUserChatList } from './userSlice';\nexport const getChat = createAsyncThunk('chatApp/chat/getChat', async ({\n  contactId,\n  isMobile\n}, {\n  dispatch,\n  getState\n}) => {\n  const {\n    id: userId\n  } = getState().chatApp.user;\n  const response = await axios.get('/api/chat/get-chat', {\n    params: {\n      contactId,\n      userId\n    }\n  });\n  const {\n    chat,\n    userChatList\n  } = await response.data;\n  dispatch(setSelectedContactId(contactId));\n  dispatch(updateUserChatList(userChatList));\n\n  if (isMobile) {\n    dispatch(closeMobileChatsSidebar());\n  }\n\n  return chat;\n});\nexport const sendMessage = createAsyncThunk('chatApp/chat/sendMessage', async ({\n  messageText,\n  chatId,\n  contactId\n}, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/chat/send-message', {\n    chatId,\n    messageText,\n    contactId\n  });\n  const {\n    message,\n    userChatList\n  } = await response.data;\n  dispatch(updateUserChatList(userChatList));\n  return message;\n});\nconst chatSlice = createSlice({\n  name: 'chatApp/chat',\n  initialState: null,\n  reducers: {\n    removeChat: (state, action) => action.payload\n  },\n  extraReducers: {\n    [getChat.fulfilled]: (state, action) => action.payload,\n    [sendMessage.fulfilled]: (state, action) => {\n      state.dialog = [...state.dialog, action.payload];\n    }\n  }\n});\nexport default chatSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/chat/store/chatSlice.js"],"names":["createSlice","createAsyncThunk","axios","setSelectedContactId","closeMobileChatsSidebar","updateUserChatList","getChat","contactId","isMobile","dispatch","getState","id","userId","chatApp","user","response","get","params","chat","userChatList","data","sendMessage","messageText","chatId","post","message","chatSlice","name","initialState","reducers","removeChat","state","action","payload","extraReducers","fulfilled","dialog","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,uBAAT,QAAwC,iBAAxC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,OAAO,MAAMC,OAAO,GAAGL,gBAAgB,CACtC,sBADsC,EAEtC,OAAO;AAAEM,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAP,EAAgC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAhC,KAA2D;AAC1D,QAAM;AAAEC,IAAAA,EAAE,EAAEC;AAAN,MAAiBF,QAAQ,GAAGG,OAAX,CAAmBC,IAA1C;AAEA,QAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,oBAAV,EAAgC;AACtDC,IAAAA,MAAM,EAAE;AACPV,MAAAA,SADO;AAEPK,MAAAA;AAFO;AAD8C,GAAhC,CAAvB;AAMA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAyB,MAAMJ,QAAQ,CAACK,IAA9C;AAEAX,EAAAA,QAAQ,CAACN,oBAAoB,CAACI,SAAD,CAArB,CAAR;AACAE,EAAAA,QAAQ,CAACJ,kBAAkB,CAACc,YAAD,CAAnB,CAAR;;AAEA,MAAIX,QAAJ,EAAc;AACbC,IAAAA,QAAQ,CAACL,uBAAuB,EAAxB,CAAR;AACA;;AAED,SAAOc,IAAP;AACA,CArBqC,CAAhC;AAwBP,OAAO,MAAMG,WAAW,GAAGpB,gBAAgB,CAC1C,0BAD0C,EAE1C,OAAO;AAAEqB,EAAAA,WAAF;AAAeC,EAAAA,MAAf;AAAuBhB,EAAAA;AAAvB,CAAP,EAA2C;AAAEE,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAA3C,KAAsE;AACrE,QAAMK,QAAQ,GAAG,MAAMb,KAAK,CAACsB,IAAN,CAAW,wBAAX,EAAqC;AAAED,IAAAA,MAAF;AAAUD,IAAAA,WAAV;AAAuBf,IAAAA;AAAvB,GAArC,CAAvB;AAEA,QAAM;AAAEkB,IAAAA,OAAF;AAAWN,IAAAA;AAAX,MAA4B,MAAMJ,QAAQ,CAACK,IAAjD;AAEAX,EAAAA,QAAQ,CAACJ,kBAAkB,CAACc,YAAD,CAAnB,CAAR;AAEA,SAAOM,OAAP;AACA,CAVyC,CAApC;AAaP,MAAMC,SAAS,GAAG1B,WAAW,CAAC;AAC7B2B,EAAAA,IAAI,EAAE,cADuB;AAE7BC,EAAAA,YAAY,EAAE,IAFe;AAG7BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AAD7B,GAHmB;AAM7BC,EAAAA,aAAa,EAAE;AACd,KAAC5B,OAAO,CAAC6B,SAAT,GAAqB,CAACJ,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OADjC;AAEd,KAACZ,WAAW,CAACc,SAAb,GAAyB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACK,MAAN,GAAe,CAAC,GAAGL,KAAK,CAACK,MAAV,EAAkBJ,MAAM,CAACC,OAAzB,CAAf;AACA;AAJa;AANc,CAAD,CAA7B;AAcA,eAAeP,SAAS,CAACW,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { setSelectedContactId } from './contactsSlice';\nimport { closeMobileChatsSidebar } from './sidebarsSlice';\nimport { updateUserChatList } from './userSlice';\n\nexport const getChat = createAsyncThunk(\n\t'chatApp/chat/getChat',\n\tasync ({ contactId, isMobile }, { dispatch, getState }) => {\n\t\tconst { id: userId } = getState().chatApp.user;\n\n\t\tconst response = await axios.get('/api/chat/get-chat', {\n\t\t\tparams: {\n\t\t\t\tcontactId,\n\t\t\t\tuserId\n\t\t\t}\n\t\t});\n\t\tconst { chat, userChatList } = await response.data;\n\n\t\tdispatch(setSelectedContactId(contactId));\n\t\tdispatch(updateUserChatList(userChatList));\n\n\t\tif (isMobile) {\n\t\t\tdispatch(closeMobileChatsSidebar());\n\t\t}\n\n\t\treturn chat;\n\t}\n);\n\nexport const sendMessage = createAsyncThunk(\n\t'chatApp/chat/sendMessage',\n\tasync ({ messageText, chatId, contactId }, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/chat/send-message', { chatId, messageText, contactId });\n\n\t\tconst { message, userChatList } = await response.data;\n\n\t\tdispatch(updateUserChatList(userChatList));\n\n\t\treturn message;\n\t}\n);\n\nconst chatSlice = createSlice({\n\tname: 'chatApp/chat',\n\tinitialState: null,\n\treducers: {\n\t\tremoveChat: (state, action) => action.payload\n\t},\n\textraReducers: {\n\t\t[getChat.fulfilled]: (state, action) => action.payload,\n\t\t[sendMessage.fulfilled]: (state, action) => {\n\t\t\tstate.dialog = [...state.dialog, action.payload];\n\t\t}\n\t}\n});\n\nexport default chatSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}