{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyectos_react\\\\Proyecto_sena\\\\src\\\\app\\\\main\\\\documentation\\\\fuse-components\\\\fuse-dialog\\\\FuseDialogDoc.js\";\nimport FuseHighlight from '@fuse/core/FuseHighlight';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { closeDialog, openDialog } from 'app/store/fuse/dialogSlice';\n\nfunction FuseDialogDoc(props) {\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    className: \"mb-24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }\n  }, \"FuseDialog\"), /*#__PURE__*/React.createElement(Typography, {\n    className: \"mb-16\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, \"FuseDialog\"), \" is a simple dialog trigger for easily showing dialog messages via redux action. It should be located in the theme layouts.\"), /*#__PURE__*/React.createElement(Typography, {\n    className: \"mt-32 mb-8\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }\n  }, \"Usage\"), /*#__PURE__*/React.createElement(Typography, {\n    className: \"mb-16\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }\n  }, \"You can show dialog anywhere with dispatching the action openDialog, it is using Material-UI's dialog so you can pass the props in the object:\"), /*#__PURE__*/React.createElement(FuseHighlight, {\n    component: \"pre\",\n    className: \"language-jsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }\n  }, `\n                        <Button\n                            onClick={()=> dispatch(openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id=\"alert-dialog-description\">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                     )\n                                 }))}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Open Dialog\n                        </Button>\n                        `), /*#__PURE__*/React.createElement(Typography, {\n    className: \"mt-32 mb-8\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }\n  }, \"Example\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => dispatch(openDialog({\n      children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogTitle, {\n        id: \"alert-dialog-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 10\n        }\n      }, \"Use Google's location service?\"), /*#__PURE__*/React.createElement(DialogContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 10\n        }\n      }, /*#__PURE__*/React.createElement(DialogContentText, {\n        id: \"alert-dialog-description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\")), /*#__PURE__*/React.createElement(DialogActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 10\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => dispatch(closeDialog()),\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, \"Disagree\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => dispatch(closeDialog()),\n        color: \"primary\",\n        autoFocus: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, \"Agree\")))\n    })),\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }\n  }, \"Open Dialog\"));\n}\n\nexport default FuseDialogDoc;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/documentation/fuse-components/fuse-dialog/FuseDialogDoc.js"],"names":["FuseHighlight","Button","DialogActions","DialogContent","DialogContentText","DialogTitle","Typography","React","useDispatch","closeDialog","openDialog","FuseDialogDoc","props","dispatch","children"],"mappings":"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","sourcesContent":["import FuseHighlight from '@fuse/core/FuseHighlight';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { closeDialog, openDialog } from 'app/store/fuse/dialogSlice';\n\nfunction FuseDialogDoc(props) {\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<>\n\t\t\t<Typography variant=\"h4\" className=\"mb-24\">\n\t\t\t\tFuseDialog\n\t\t\t</Typography>\n\n\t\t\t<Typography className=\"mb-16\" component=\"p\">\n\t\t\t\t<code>FuseDialog</code> is a simple dialog trigger for easily showing dialog messages via redux action.\n\t\t\t\tIt should be located in the theme layouts.\n\t\t\t</Typography>\n\n\t\t\t<Typography className=\"mt-32 mb-8\" variant=\"h5\">\n\t\t\t\tUsage\n\t\t\t</Typography>\n\n\t\t\t<Typography className=\"mb-16\" component=\"p\">\n\t\t\t\tYou can show dialog anywhere with dispatching the action openDialog, it is using Material-UI's dialog so\n\t\t\t\tyou can pass the props in the object:\n\t\t\t</Typography>\n\n\t\t\t<FuseHighlight component=\"pre\" className=\"language-jsx\">\n\t\t\t\t{`\n                        <Button\n                            onClick={()=> dispatch(openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id=\"alert-dialog-description\">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={()=> dispatch(closeDialog())} color=\"primary\" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                     )\n                                 }))}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Open Dialog\n                        </Button>\n                        `}\n\t\t\t</FuseHighlight>\n\n\t\t\t<Typography className=\"mt-32 mb-8\" variant=\"h5\">\n\t\t\t\tExample\n\t\t\t</Typography>\n\n\t\t\t<Button\n\t\t\t\tonClick={() =>\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\topenDialog({\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t<DialogContentText id=\"alert-dialog-description\">\n\t\t\t\t\t\t\t\t\t\t\tLet Google help apps determine location. This means sending anonymous\n\t\t\t\t\t\t\t\t\t\t\tlocation data to Google, even when no apps are running.\n\t\t\t\t\t\t\t\t\t\t</DialogContentText>\n\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t<Button onClick={() => dispatch(closeDialog())} color=\"primary\">\n\t\t\t\t\t\t\t\t\t\t\tDisagree\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t<Button onClick={() => dispatch(closeDialog())} color=\"primary\" autoFocus>\n\t\t\t\t\t\t\t\t\t\t\tAgree\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tcolor=\"secondary\"\n\t\t\t>\n\t\t\t\tOpen Dialog\n\t\t\t</Button>\n\t\t</>\n\t);\n}\n\nexport default FuseDialogDoc;\n"]},"metadata":{},"sourceType":"module"}