{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport history from '@history';\nimport BoardModel from '../model/BoardModel';\nexport const getBoards = createAsyncThunk('scrumboardApp/boards/getBoards', async () => {\n  const response = await axios.get('/api/scrumboard-app/boards');\n  const data = await response.data;\n  return data;\n});\nexport const newBoard = createAsyncThunk('scrumboardApp/boards/newBoard', async (board, {\n  dispatch\n}) => {\n  const response = await axios.post('/api/scrumboard-app/board/new', {\n    board: board || new BoardModel()\n  });\n  const data = await response.data;\n  history.push({\n    pathname: `/apps/scrumboard/boards/${data.id}/${data.handle}`\n  });\n  return data;\n});\nconst boardsAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectBoards,\n  selectById: selectBoardById\n} = boardsAdapter.getSelectors(state => state.scrumboardApp.boards);\nconst boardsSlice = createSlice({\n  name: 'scrumboardApp/boards',\n  initialState: boardsAdapter.getInitialState({}),\n  reducers: {\n    resetBoards: (state, action) => {}\n  },\n  extraReducers: {\n    [getBoards.fulfilled]: boardsAdapter.setAll\n  }\n});\nexport const {\n  resetBoards\n} = boardsSlice.actions;\nexport default boardsSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/scrumboard/store/boardsSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","axios","history","BoardModel","getBoards","response","get","data","newBoard","board","dispatch","post","push","pathname","id","handle","boardsAdapter","selectAll","selectBoards","selectById","selectBoardById","getSelectors","state","scrumboardApp","boards","boardsSlice","name","initialState","getInitialState","reducers","resetBoards","action","extraReducers","fulfilled","setAll","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,mBAAxC,QAAmE,kBAAnE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,OAAO,MAAMC,SAAS,GAAGL,gBAAgB,CAAC,gCAAD,EAAmC,YAAY;AACvF,QAAMM,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,4BAAV,CAAvB;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AAEA,SAAOA,IAAP;AACA,CALwC,CAAlC;AAOP,OAAO,MAAMC,QAAQ,GAAGT,gBAAgB,CAAC,+BAAD,EAAkC,OAAOU,KAAP,EAAc;AAAEC,EAAAA;AAAF,CAAd,KAA+B;AACxG,QAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACU,IAAN,CAAW,+BAAX,EAA4C;AAAEF,IAAAA,KAAK,EAAEA,KAAK,IAAI,IAAIN,UAAJ;AAAlB,GAA5C,CAAvB;AACA,QAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AAEAL,EAAAA,OAAO,CAACU,IAAR,CAAa;AACZC,IAAAA,QAAQ,EAAG,2BAA0BN,IAAI,CAACO,EAAG,IAAGP,IAAI,CAACQ,MAAO;AADhD,GAAb;AAIA,SAAOR,IAAP;AACA,CATuC,CAAjC;AAWP,MAAMS,aAAa,GAAGhB,mBAAmB,CAAC,EAAD,CAAzC;AAEA,OAAO,MAAM;AAAEiB,EAAAA,SAAS,EAAEC,YAAb;AAA2BC,EAAAA,UAAU,EAAEC;AAAvC,IAA2DJ,aAAa,CAACK,YAAd,CACvEC,KAAK,IAAIA,KAAK,CAACC,aAAN,CAAoBC,MAD0C,CAAjE;AAIP,MAAMC,WAAW,GAAG3B,WAAW,CAAC;AAC/B4B,EAAAA,IAAI,EAAE,sBADyB;AAE/BC,EAAAA,YAAY,EAAEX,aAAa,CAACY,eAAd,CAA8B,EAA9B,CAFiB;AAG/BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,WAAW,EAAE,CAACR,KAAD,EAAQS,MAAR,KAAmB,CAAE;AADzB,GAHqB;AAM/BC,EAAAA,aAAa,EAAE;AACd,KAAC5B,SAAS,CAAC6B,SAAX,GAAuBjB,aAAa,CAACkB;AADvB;AANgB,CAAD,CAA/B;AAWA,OAAO,MAAM;AAAEJ,EAAAA;AAAF,IAAkBL,WAAW,CAACU,OAApC;AAEP,eAAeV,WAAW,CAACW,OAA3B","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport history from '@history';\nimport BoardModel from '../model/BoardModel';\n\nexport const getBoards = createAsyncThunk('scrumboardApp/boards/getBoards', async () => {\n\tconst response = await axios.get('/api/scrumboard-app/boards');\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const newBoard = createAsyncThunk('scrumboardApp/boards/newBoard', async (board, { dispatch }) => {\n\tconst response = await axios.post('/api/scrumboard-app/board/new', { board: board || new BoardModel() });\n\tconst data = await response.data;\n\n\thistory.push({\n\t\tpathname: `/apps/scrumboard/boards/${data.id}/${data.handle}`\n\t});\n\n\treturn data;\n});\n\nconst boardsAdapter = createEntityAdapter({});\n\nexport const { selectAll: selectBoards, selectById: selectBoardById } = boardsAdapter.getSelectors(\n\tstate => state.scrumboardApp.boards\n);\n\nconst boardsSlice = createSlice({\n\tname: 'scrumboardApp/boards',\n\tinitialState: boardsAdapter.getInitialState({}),\n\treducers: {\n\t\tresetBoards: (state, action) => {}\n\t},\n\textraReducers: {\n\t\t[getBoards.fulfilled]: boardsAdapter.setAll\n\t}\n});\n\nexport const { resetBoards } = boardsSlice.actions;\n\nexport default boardsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}