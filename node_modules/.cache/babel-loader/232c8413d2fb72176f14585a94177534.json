{"ast":null,"code":"var _jsxFileName = \"D:\\\\proyectos_react\\\\Proyecto_sena\\\\src\\\\app\\\\main\\\\documentation\\\\material-ui-components\\\\components\\\\autocomplete\\\\Virtualize.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport { VariableSizeList } from 'react-window';\nimport { Typography } from '@material-ui/core';\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props) {\n  const {\n    data,\n    index,\n    style\n  } = props;\n  return React.cloneElement(data[index], {\n    style: { ...style,\n      top: style.top + LISTBOX_PADDING\n    }\n  });\n}\n\nconst OuterElementContext = React.createContext({});\nconst OuterElementType = React.forwardRef((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: ref\n  }, props, outerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }));\n});\n\nfunction useResetCache(data) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n} // Adapter for react-window\n\n\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\n  const {\n    children,\n    ...other\n  } = props;\n  const itemData = React.Children.toArray(children);\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), {\n    noSsr: true\n  });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = child => {\n    if (React.isValidElement(child) && child.type === ListSubheader) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  const gridRef = useResetCache(itemCount);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(OuterElementContext.Provider, {\n    value: other,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(VariableSizeList, {\n    itemData: itemData,\n    height: getHeight() + 2 * LISTBOX_PADDING,\n    width: \"100%\",\n    ref: gridRef,\n    outerElementType: OuterElementType,\n    innerElementType: \"ul\",\n    itemSize: index => getChildSize(itemData[index]),\n    overscanCount: 5,\n    itemCount: itemCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, renderRow)));\n});\nListboxComponent.propTypes = {\n  children: PropTypes.node\n};\n\nfunction random(length) {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n\n  for (let i = 0; i < length; i += 1) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n\n  return result;\n}\n\nconst useStyles = makeStyles({\n  listbox: {\n    boxSizing: 'border-box',\n    '& ul': {\n      padding: 0,\n      margin: 0\n    }\n  }\n});\nconst OPTIONS = Array.from(new Array(10000)).map(() => random(10 + Math.ceil(Math.random() * 20))).sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\n\nconst renderGroup = params => [/*#__PURE__*/React.createElement(ListSubheader, {\n  key: params.key,\n  component: \"div\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 3\n  }\n}, params.group), params.children];\n\nexport default function Virtualize() {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"virtualize-demo\",\n    style: {\n      width: 300\n    },\n    disableListWrap: true,\n    classes: classes,\n    ListboxComponent: ListboxComponent,\n    renderGroup: renderGroup,\n    options: OPTIONS,\n    groupBy: option => option[0].toUpperCase(),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"10,000 options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 32\n      }\n    })),\n    renderOption: option => /*#__PURE__*/React.createElement(Typography, {\n      noWrap: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 33\n      }\n    }, option),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/documentation/material-ui-components/components/autocomplete/Virtualize.js"],"names":["React","PropTypes","TextField","Autocomplete","useMediaQuery","ListSubheader","useTheme","makeStyles","VariableSizeList","Typography","LISTBOX_PADDING","renderRow","props","data","index","style","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","useResetCache","useRef","useEffect","current","resetAfterIndex","ListboxComponent","children","other","itemData","Children","toArray","theme","smUp","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","getHeight","map","reduce","a","b","gridRef","propTypes","node","random","characters","result","i","charAt","Math","floor","useStyles","listbox","boxSizing","padding","margin","OPTIONS","Array","from","ceil","sort","toUpperCase","localeCompare","renderGroup","params","key","group","Virtualize","classes","width","option"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport { VariableSizeList } from 'react-window';\nimport { Typography } from '@material-ui/core';\n\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props) {\n  const { data, index, style } = props;\n  return React.cloneElement(data[index], {\n    style: {\n      ...style,\n      top: style.top + LISTBOX_PADDING,\n    },\n  });\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n}\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\n  const { children, ...other } = props;\n  const itemData = React.Children.toArray(children);\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = (child) => {\n    if (React.isValidElement(child) && child.type === ListSubheader) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  const gridRef = useResetCache(itemCount);\n\n  return (\n    <div ref={ref}>\n      <OuterElementContext.Provider value={other}>\n        <VariableSizeList\n          itemData={itemData}\n          height={getHeight() + 2 * LISTBOX_PADDING}\n          width=\"100%\"\n          ref={gridRef}\n          outerElementType={OuterElementType}\n          innerElementType=\"ul\"\n          itemSize={(index) => getChildSize(itemData[index])}\n          overscanCount={5}\n          itemCount={itemCount}\n        >\n          {renderRow}\n        </VariableSizeList>\n      </OuterElementContext.Provider>\n    </div>\n  );\n});\n\nListboxComponent.propTypes = {\n  children: PropTypes.node,\n};\n\nfunction random(length) {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n\n  for (let i = 0; i < length; i += 1) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n\n  return result;\n}\n\nconst useStyles = makeStyles({\n  listbox: {\n    boxSizing: 'border-box',\n    '& ul': {\n      padding: 0,\n      margin: 0,\n    },\n  },\n});\n\nconst OPTIONS = Array.from(new Array(10000))\n  .map(() => random(10 + Math.ceil(Math.random() * 20)))\n  .sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\n\nconst renderGroup = (params) => [\n  <ListSubheader key={params.key} component=\"div\">\n    {params.group}\n  </ListSubheader>,\n  params.children,\n];\n\nexport default function Virtualize() {\n  const classes = useStyles();\n\n  return (\n    <Autocomplete\n      id=\"virtualize-demo\"\n      style={{ width: 300 }}\n      disableListWrap\n      classes={classes}\n      ListboxComponent={ListboxComponent}\n      renderGroup={renderGroup}\n      options={OPTIONS}\n      groupBy={(option) => option[0].toUpperCase()}\n      renderInput={(params) => <TextField {...params} variant=\"outlined\" label=\"10,000 options\" />}\n      renderOption={(option) => <Typography noWrap>{option}</Typography>}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}