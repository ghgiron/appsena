{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport jwtService from 'app/services/jwtService';\nexport const setUserData = user => async (dispatch, getState) => {\n  /*\n     You can redirect the logged-in user to a specific route depending on his role\n      */\n  console.log(user.data.shortcuts[0]);\n\n  if (user.data.shortcuts[0] === user.data.shortcuts[1]) {\n    history.location.state = {\n      redirectUrl: '/apps/empresa' // for example 'apps/academy'\n\n    };\n  } else {\n    history.location.state = {\n      redirectUrl: '/apps/dashboards/project' // for example 'apps/academy'\n\n    };\n  }\n  /*\n     Set User Settings\n      */\n\n\n  dispatch(setDefaultSettings(user.data.settings));\n  dispatch(setUser(user));\n};\nexport const updateUserSettings = settings => async (dispatch, getState) => {\n  const oldUser = getState().auth.user;\n\n  const user = _.merge({}, oldUser, {\n    data: {\n      settings\n    }\n  });\n\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(user));\n};\nexport const updateUserShortcuts = shortcuts => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n  const newUser = { ...user,\n    data: { ...user.data,\n      shortcuts\n    }\n  };\n  dispatch(updateUserData(user));\n  return dispatch(setUserData(newUser));\n};\nexport const logoutUser = () => async (dispatch, getState) => {\n  const {\n    user\n  } = getState().auth;\n\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return null;\n  }\n\n  history.push({\n    pathname: '/'\n  });\n\n  switch (user.from) {\n    default:\n      {\n        jwtService.logout();\n      }\n  }\n\n  dispatch(setInitialSettings());\n  dispatch(userLoggedOut());\n};\nexport const updateUserData = user => async (dispatch, getState) => {\n  if (!user.role || user.role.length === 0) {\n    // is guest\n    return;\n  }\n\n  switch (user.from) {\n    default:\n      {\n        jwtService.updateUserData(user).then(() => {\n          dispatch(showMessage({\n            message: 'User data saved with api'\n          }));\n        }).catch(error => {\n          dispatch(showMessage({\n            message: error.message\n          }));\n        });\n        break;\n      }\n  }\n};\nconst initialState = {\n  role: [],\n  // guest\n  data: {\n    displayName: 'John Doe',\n    photoURL: 'assets/images/avatars/Velazquez.jpg',\n    email: 'johndoe@withinpixels.com',\n    shortcuts: ['calendar', 'mail', 'contacts', 'todo']\n  }\n};\nconst userSlice = createSlice({\n  name: 'auth/user',\n  initialState,\n  reducers: {\n    setUser: (state, action) => action.payload,\n    userLoggedOut: (state, action) => initialState\n  },\n  extraReducers: {}\n});\nexport const {\n  setUser,\n  userLoggedOut\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena_desarrollo/src/app/auth/store/userSlice.js"],"names":["createSlice","history","_","setInitialSettings","setDefaultSettings","showMessage","jwtService","setUserData","user","dispatch","getState","console","log","data","shortcuts","location","state","redirectUrl","settings","setUser","updateUserSettings","oldUser","auth","merge","updateUserData","updateUserShortcuts","newUser","logoutUser","role","length","push","pathname","from","logout","userLoggedOut","then","message","catch","error","initialState","displayName","photoURL","email","userSlice","name","reducers","action","payload","extraReducers","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,8BAAvD;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,OAAO,MAAMC,WAAW,GAAGC,IAAI,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC5D;AACL;AACA;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAAZ;;AACA,MAAIN,IAAI,CAACK,IAAL,CAAUC,SAAV,CAAoB,CAApB,MAA2BN,IAAI,CAACK,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAA/B,EAAuD;AACtDb,IAAAA,OAAO,CAACc,QAAR,CAAiBC,KAAjB,GAAyB;AACxBC,MAAAA,WAAW,EAAE,eADW,CACK;;AADL,KAAzB;AAGA,GAJD,MAIO;AACNhB,IAAAA,OAAO,CAACc,QAAR,CAAiBC,KAAjB,GAAyB;AACxBC,MAAAA,WAAW,EAAE,0BADW,CACgB;;AADhB,KAAzB;AAGA;AACD;AACD;AACA;;;AACCR,EAAAA,QAAQ,CAACL,kBAAkB,CAACI,IAAI,CAACK,IAAL,CAAUK,QAAX,CAAnB,CAAR;AACAT,EAAAA,QAAQ,CAACU,OAAO,CAACX,IAAD,CAAR,CAAR;AACA,CAnBM;AAqBP,OAAO,MAAMY,kBAAkB,GAAGF,QAAQ,IAAI,OAAOT,QAAP,EAAiBC,QAAjB,KAA8B;AAC3E,QAAMW,OAAO,GAAGX,QAAQ,GAAGY,IAAX,CAAgBd,IAAhC;;AACA,QAAMA,IAAI,GAAGN,CAAC,CAACqB,KAAF,CAAQ,EAAR,EAAYF,OAAZ,EAAqB;AAAER,IAAAA,IAAI,EAAE;AAAEK,MAAAA;AAAF;AAAR,GAArB,CAAb;;AAEAT,EAAAA,QAAQ,CAACe,cAAc,CAAChB,IAAD,CAAf,CAAR;AAEA,SAAOC,QAAQ,CAACF,WAAW,CAACC,IAAD,CAAZ,CAAf;AACA,CAPM;AASP,OAAO,MAAMiB,mBAAmB,GAAGX,SAAS,IAAI,OAAOL,QAAP,EAAiBC,QAAjB,KAA8B;AAC7E,QAAM;AAAEF,IAAAA;AAAF,MAAWE,QAAQ,GAAGY,IAA5B;AACA,QAAMI,OAAO,GAAG,EACf,GAAGlB,IADY;AAEfK,IAAAA,IAAI,EAAE,EACL,GAAGL,IAAI,CAACK,IADH;AAELC,MAAAA;AAFK;AAFS,GAAhB;AAQAL,EAAAA,QAAQ,CAACe,cAAc,CAAChB,IAAD,CAAf,CAAR;AAEA,SAAOC,QAAQ,CAACF,WAAW,CAACmB,OAAD,CAAZ,CAAf;AACA,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,MAAM,OAAOlB,QAAP,EAAiBC,QAAjB,KAA8B;AAC7D,QAAM;AAAEF,IAAAA;AAAF,MAAWE,QAAQ,GAAGY,IAA5B;;AAEA,MAAI,CAACd,IAAI,CAACoB,IAAN,IAAcpB,IAAI,CAACoB,IAAL,CAAUC,MAAV,KAAqB,CAAvC,EAA0C;AACzC;AACA,WAAO,IAAP;AACA;;AAED5B,EAAAA,OAAO,CAAC6B,IAAR,CAAa;AACZC,IAAAA,QAAQ,EAAE;AADE,GAAb;;AAIA,UAAQvB,IAAI,CAACwB,IAAb;AACC;AAAS;AACR1B,QAAAA,UAAU,CAAC2B,MAAX;AACA;AAHF;;AAMAxB,EAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AAEAM,EAAAA,QAAQ,CAACyB,aAAa,EAAd,CAAR;AACA,CArBM;AAuBP,OAAO,MAAMV,cAAc,GAAGhB,IAAI,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnE,MAAI,CAACF,IAAI,CAACoB,IAAN,IAAcpB,IAAI,CAACoB,IAAL,CAAUC,MAAV,KAAqB,CAAvC,EAA0C;AACzC;AACA;AACA;;AAED,UAAQrB,IAAI,CAACwB,IAAb;AACC;AAAS;AACR1B,QAAAA,UAAU,CACRkB,cADF,CACiBhB,IADjB,EAEE2B,IAFF,CAEO,MAAM;AACX1B,UAAAA,QAAQ,CAACJ,WAAW,CAAC;AAAE+B,YAAAA,OAAO,EAAE;AAAX,WAAD,CAAZ,CAAR;AACA,SAJF,EAKEC,KALF,CAKQC,KAAK,IAAI;AACf7B,UAAAA,QAAQ,CAACJ,WAAW,CAAC;AAAE+B,YAAAA,OAAO,EAAEE,KAAK,CAACF;AAAjB,WAAD,CAAZ,CAAR;AACA,SAPF;AAQA;AACA;AAXF;AAaA,CAnBM;AAqBP,MAAMG,YAAY,GAAG;AACpBX,EAAAA,IAAI,EAAE,EADc;AACV;AACVf,EAAAA,IAAI,EAAE;AACL2B,IAAAA,WAAW,EAAE,UADR;AAELC,IAAAA,QAAQ,EAAE,qCAFL;AAGLC,IAAAA,KAAK,EAAE,0BAHF;AAIL5B,IAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,MAAb,EAAqB,UAArB,EAAiC,MAAjC;AAJN;AAFc,CAArB;AAUA,MAAM6B,SAAS,GAAG3C,WAAW,CAAC;AAC7B4C,EAAAA,IAAI,EAAE,WADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACT1B,IAAAA,OAAO,EAAE,CAACH,KAAD,EAAQ8B,MAAR,KAAmBA,MAAM,CAACC,OAD1B;AAETb,IAAAA,aAAa,EAAE,CAAClB,KAAD,EAAQ8B,MAAR,KAAmBP;AAFzB,GAHmB;AAO7BS,EAAAA,aAAa,EAAE;AAPc,CAAD,CAA7B;AAUA,OAAO,MAAM;AAAE7B,EAAAA,OAAF;AAAWe,EAAAA;AAAX,IAA6BS,SAAS,CAACM,OAA7C;AAEP,eAAeN,SAAS,CAACO,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport history from '@history';\nimport _ from '@lodash';\nimport { setInitialSettings, setDefaultSettings } from 'app/store/fuse/settingsSlice';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport jwtService from 'app/services/jwtService';\n\nexport const setUserData = user => async (dispatch, getState) => {\n\t    /*\n        You can redirect the logged-in user to a specific route depending on his role\n         */\n\tconsole.log(user.data.shortcuts[0])\n\tif (user.data.shortcuts[0] === user.data.shortcuts[1]) {\n\t\thistory.location.state = {\n\t\t\tredirectUrl: '/apps/empresa' // for example 'apps/academy'\n\t\t};\n\t} else {\n\t\thistory.location.state = {\n\t\t\tredirectUrl: '/apps/dashboards/project' // for example 'apps/academy'\n\t\t};\n\t}\n\t/*\n    Set User Settings\n     */\n\tdispatch(setDefaultSettings(user.data.settings));\n\tdispatch(setUser(user));\n};\n\nexport const updateUserSettings = settings => async (dispatch, getState) => {\n\tconst oldUser = getState().auth.user;\n\tconst user = _.merge({}, oldUser, { data: { settings } });\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(user));\n};\n\nexport const updateUserShortcuts = shortcuts => async (dispatch, getState) => {\n\tconst { user } = getState().auth;\n\tconst newUser = {\n\t\t...user,\n\t\tdata: {\n\t\t\t...user.data,\n\t\t\tshortcuts\n\t\t}\n\t};\n\n\tdispatch(updateUserData(user));\n\n\treturn dispatch(setUserData(newUser));\n};\n\nexport const logoutUser = () => async (dispatch, getState) => {\n\tconst { user } = getState().auth;\n\n\tif (!user.role || user.role.length === 0) {\n\t\t// is guest\n\t\treturn null;\n\t}\n\n\thistory.push({\n\t\tpathname: '/'\n\t});\n\n\tswitch (user.from) {\n\t\tdefault: {\n\t\t\tjwtService.logout();\n\t\t}\n\t}\n\n\tdispatch(setInitialSettings());\n\n\tdispatch(userLoggedOut());\n};\n\nexport const updateUserData = user => async (dispatch, getState) => {\n\tif (!user.role || user.role.length === 0) {\n\t\t// is guest\n\t\treturn;\n\t}\n\t\n\tswitch (user.from) {\n\t\tdefault: {\n\t\t\tjwtService\n\t\t\t\t.updateUserData(user)\n\t\t\t\t.then(() => {\n\t\t\t\t\tdispatch(showMessage({ message: 'User data saved with api' }));\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t}\n};\n\nconst initialState = {\n\trole: [], // guest\n\tdata: {\n\t\tdisplayName: 'John Doe',\n\t\tphotoURL: 'assets/images/avatars/Velazquez.jpg',\n\t\temail: 'johndoe@withinpixels.com',\n\t\tshortcuts: ['calendar', 'mail', 'contacts', 'todo']\n\t}\n};\n\nconst userSlice = createSlice({\n\tname: 'auth/user',\n\tinitialState,\n\treducers: {\n\t\tsetUser: (state, action) => action.payload,\n\t\tuserLoggedOut: (state, action) => initialState\n\t},\n\textraReducers: {}\n});\n\nexport const { setUser, userLoggedOut } = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}