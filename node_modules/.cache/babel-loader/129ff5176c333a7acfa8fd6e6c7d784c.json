{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { setSelectedContactId } from './contactsSlice';\nimport { closeChatPanel } from './stateSlice';\nimport { updateUserChatList } from './userSlice';\nexport const getChat = createAsyncThunk('chatPanel/chat/getChat', async ({\n  contactId\n}, {\n  dispatch,\n  getState\n}) => {\n  const {\n    id: userId\n  } = getState().chatPanel.user;\n  const response = await axios.get('/api/chat/get-chat', {\n    params: {\n      contactId,\n      userId\n    }\n  });\n  const {\n    chat,\n    userChatList\n  } = await response.data;\n  dispatch(setSelectedContactId(contactId));\n  dispatch(updateUserChatList(userChatList));\n  return chat;\n});\nexport const sendMessage = createAsyncThunk('chatPanel/chat/sendMessage', async ({\n  messageText,\n  chatId,\n  contactId\n}, {\n  dispatch,\n  getState\n}) => {\n  const response = await axios.post('/api/chat/send-message', {\n    chatId,\n    messageText,\n    contactId\n  });\n  const {\n    message,\n    userChatList\n  } = await response.data;\n  dispatch(updateUserChatList(userChatList));\n  return message;\n});\nconst chatSlice = createSlice({\n  name: 'chatPanel/chat',\n  initialState: null,\n  reducers: {\n    removeChat: (state, action) => null\n  },\n  extraReducers: {\n    [getChat.fulfilled]: (state, action) => action.payload,\n    [sendMessage.fulfilled]: (state, action) => {\n      state.dialog = [...state.dialog, action.payload];\n    },\n    [closeChatPanel]: (state, action) => null\n  }\n});\nexport const {\n  removeChat\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/fuse-layouts/shared-components/chatPanel/store/chatSlice.js"],"names":["createSlice","createAsyncThunk","axios","setSelectedContactId","closeChatPanel","updateUserChatList","getChat","contactId","dispatch","getState","id","userId","chatPanel","user","response","get","params","chat","userChatList","data","sendMessage","messageText","chatId","post","message","chatSlice","name","initialState","reducers","removeChat","state","action","extraReducers","fulfilled","payload","dialog","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,OAAO,MAAMC,OAAO,GAAGL,gBAAgB,CAAC,wBAAD,EAA2B,OAAO;AAAEM,EAAAA;AAAF,CAAP,EAAsB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAtB,KAAiD;AAClH,QAAM;AAAEC,IAAAA,EAAE,EAAEC;AAAN,MAAiBF,QAAQ,GAAGG,SAAX,CAAqBC,IAA5C;AAEA,QAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,oBAAV,EAAgC;AACtDC,IAAAA,MAAM,EAAE;AACPT,MAAAA,SADO;AAEPI,MAAAA;AAFO;AAD8C,GAAhC,CAAvB;AAMA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAyB,MAAMJ,QAAQ,CAACK,IAA9C;AAEAX,EAAAA,QAAQ,CAACL,oBAAoB,CAACI,SAAD,CAArB,CAAR;AACAC,EAAAA,QAAQ,CAACH,kBAAkB,CAACa,YAAD,CAAnB,CAAR;AAEA,SAAOD,IAAP;AACA,CAfsC,CAAhC;AAiBP,OAAO,MAAMG,WAAW,GAAGnB,gBAAgB,CAC1C,4BAD0C,EAE1C,OAAO;AAAEoB,EAAAA,WAAF;AAAeC,EAAAA,MAAf;AAAuBf,EAAAA;AAAvB,CAAP,EAA2C;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAA3C,KAAsE;AACrE,QAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACqB,IAAN,CAAW,wBAAX,EAAqC;AAAED,IAAAA,MAAF;AAAUD,IAAAA,WAAV;AAAuBd,IAAAA;AAAvB,GAArC,CAAvB;AAEA,QAAM;AAAEiB,IAAAA,OAAF;AAAWN,IAAAA;AAAX,MAA4B,MAAMJ,QAAQ,CAACK,IAAjD;AAEAX,EAAAA,QAAQ,CAACH,kBAAkB,CAACa,YAAD,CAAnB,CAAR;AAEA,SAAOM,OAAP;AACA,CAVyC,CAApC;AAaP,MAAMC,SAAS,GAAGzB,WAAW,CAAC;AAC7B0B,EAAAA,IAAI,EAAE,gBADuB;AAE7BC,EAAAA,YAAY,EAAE,IAFe;AAG7BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AADtB,GAHmB;AAM7BC,EAAAA,aAAa,EAAE;AACd,KAAC1B,OAAO,CAAC2B,SAAT,GAAqB,CAACH,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACG,OADjC;AAEd,KAACd,WAAW,CAACa,SAAb,GAAyB,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACK,MAAN,GAAe,CAAC,GAAGL,KAAK,CAACK,MAAV,EAAkBJ,MAAM,CAACG,OAAzB,CAAf;AACA,KAJa;AAKd,KAAC9B,cAAD,GAAkB,CAAC0B,KAAD,EAAQC,MAAR,KAAmB;AALvB;AANc,CAAD,CAA7B;AAeA,OAAO,MAAM;AAAEF,EAAAA;AAAF,IAAiBJ,SAAS,CAACW,OAAjC;AAEP,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { setSelectedContactId } from './contactsSlice';\nimport { closeChatPanel } from './stateSlice';\nimport { updateUserChatList } from './userSlice';\n\nexport const getChat = createAsyncThunk('chatPanel/chat/getChat', async ({ contactId }, { dispatch, getState }) => {\n\tconst { id: userId } = getState().chatPanel.user;\n\n\tconst response = await axios.get('/api/chat/get-chat', {\n\t\tparams: {\n\t\t\tcontactId,\n\t\t\tuserId\n\t\t}\n\t});\n\tconst { chat, userChatList } = await response.data;\n\n\tdispatch(setSelectedContactId(contactId));\n\tdispatch(updateUserChatList(userChatList));\n\n\treturn chat;\n});\n\nexport const sendMessage = createAsyncThunk(\n\t'chatPanel/chat/sendMessage',\n\tasync ({ messageText, chatId, contactId }, { dispatch, getState }) => {\n\t\tconst response = await axios.post('/api/chat/send-message', { chatId, messageText, contactId });\n\n\t\tconst { message, userChatList } = await response.data;\n\n\t\tdispatch(updateUserChatList(userChatList));\n\n\t\treturn message;\n\t}\n);\n\nconst chatSlice = createSlice({\n\tname: 'chatPanel/chat',\n\tinitialState: null,\n\treducers: {\n\t\tremoveChat: (state, action) => null\n\t},\n\textraReducers: {\n\t\t[getChat.fulfilled]: (state, action) => action.payload,\n\t\t[sendMessage.fulfilled]: (state, action) => {\n\t\t\tstate.dialog = [...state.dialog, action.payload];\n\t\t},\n\t\t[closeChatPanel]: (state, action) => null\n\t}\n});\n\nexport const { removeChat } = chatSlice.actions;\n\nexport default chatSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}