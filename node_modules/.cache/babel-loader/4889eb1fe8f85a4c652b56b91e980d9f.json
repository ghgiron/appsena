{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getNotes = createAsyncThunk('notesApp/notes/getNotes', async () => {\n  const response = await axios.get('/api/notes-app/notes');\n  const data = await response.data;\n  return data;\n});\nexport const createNote = createAsyncThunk('notesApp/notes/createNote', async note => {\n  const response = await axios.post('/api/notes-app/create-note', {\n    note\n  });\n  const data = await response.data;\n  return data;\n});\nexport const updateNote = createAsyncThunk('notesApp/notes/updateNote', async note => {\n  const response = await axios.post('/api/notes-app/update-note', {\n    note\n  });\n  const data = await response.data;\n  return data;\n});\nexport const removeNote = createAsyncThunk('notesApp/notes/removeNote', async noteId => {\n  const response = await axios.post('/api/notes-app/remove-note', {\n    noteId\n  });\n  const data = await response.data;\n  return data;\n});\nconst notesAdapter = createEntityAdapter({});\nexport const {\n  selectAll: selectNotes,\n  selectEntities: selectNotesEntities,\n  selectById: selectNoteById\n} = notesAdapter.getSelectors(state => state.notesApp.notes);\nconst notesSlice = createSlice({\n  name: 'notesApp/notes',\n  initialState: notesAdapter.getInitialState({\n    searchText: '',\n    noteDialogId: null,\n    variateDescSize: true\n  }),\n  reducers: {\n    setNotesSearchText: {\n      reducer: (state, action) => {\n        state.searchText = action.payload;\n      },\n      prepare: event => ({\n        payload: event.target.value || ''\n      })\n    },\n    resetNotesSearchText: (state, action) => {\n      state.searchText = '';\n    },\n    toggleVariateDescSize: (state, action) => {\n      state.variateDescSize = !state.variateDescSize;\n    },\n    openNoteDialog: (state, action) => {\n      state.noteDialogId = action.payload;\n    },\n    closeNoteDialog: (state, action) => {\n      state.noteDialogId = action.null;\n    }\n  },\n  extraReducers: {\n    [getNotes.fulfilled]: notesAdapter.setAll,\n    [createNote.fulfilled]: notesAdapter.addOne,\n    [updateNote.fulfilled]: notesAdapter.upsertOne,\n    [removeNote.fulfilled]: notesAdapter.removeOne\n  }\n});\nexport const {\n  setNotesSearchText,\n  resetNotesSearchText,\n  toggleVariateDescSize,\n  openNoteDialog,\n  closeNoteDialog\n} = notesSlice.actions;\nexport default notesSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena/src/app/main/apps/notes/store/notesSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","axios","getNotes","response","get","data","createNote","note","post","updateNote","removeNote","noteId","notesAdapter","selectAll","selectNotes","selectEntities","selectNotesEntities","selectById","selectNoteById","getSelectors","state","notesApp","notes","notesSlice","name","initialState","getInitialState","searchText","noteDialogId","variateDescSize","reducers","setNotesSearchText","reducer","action","payload","prepare","event","target","value","resetNotesSearchText","toggleVariateDescSize","openNoteDialog","closeNoteDialog","null","extraReducers","fulfilled","setAll","addOne","upsertOne","removeOne","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getNotes = createAsyncThunk('notesApp/notes/getNotes', async () => {\n\tconst response = await axios.get('/api/notes-app/notes');\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const createNote = createAsyncThunk('notesApp/notes/createNote', async note => {\n\tconst response = await axios.post('/api/notes-app/create-note', { note });\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const updateNote = createAsyncThunk('notesApp/notes/updateNote', async note => {\n\tconst response = await axios.post('/api/notes-app/update-note', { note });\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nexport const removeNote = createAsyncThunk('notesApp/notes/removeNote', async noteId => {\n\tconst response = await axios.post('/api/notes-app/remove-note', { noteId });\n\tconst data = await response.data;\n\n\treturn data;\n});\n\nconst notesAdapter = createEntityAdapter({});\n\nexport const {\n\tselectAll: selectNotes,\n\tselectEntities: selectNotesEntities,\n\tselectById: selectNoteById\n} = notesAdapter.getSelectors(state => state.notesApp.notes);\n\nconst notesSlice = createSlice({\n\tname: 'notesApp/notes',\n\tinitialState: notesAdapter.getInitialState({ searchText: '', noteDialogId: null, variateDescSize: true }),\n\treducers: {\n\t\tsetNotesSearchText: {\n\t\t\treducer: (state, action) => {\n\t\t\t\tstate.searchText = action.payload;\n\t\t\t},\n\t\t\tprepare: event => ({ payload: event.target.value || '' })\n\t\t},\n\t\tresetNotesSearchText: (state, action) => {\n\t\t\tstate.searchText = '';\n\t\t},\n\t\ttoggleVariateDescSize: (state, action) => {\n\t\t\tstate.variateDescSize = !state.variateDescSize;\n\t\t},\n\t\topenNoteDialog: (state, action) => {\n\t\t\tstate.noteDialogId = action.payload;\n\t\t},\n\t\tcloseNoteDialog: (state, action) => {\n\t\t\tstate.noteDialogId = action.null;\n\t\t}\n\t},\n\textraReducers: {\n\t\t[getNotes.fulfilled]: notesAdapter.setAll,\n\t\t[createNote.fulfilled]: notesAdapter.addOne,\n\t\t[updateNote.fulfilled]: notesAdapter.upsertOne,\n\t\t[removeNote.fulfilled]: notesAdapter.removeOne\n\t}\n});\n\nexport const {\n\tsetNotesSearchText,\n\tresetNotesSearchText,\n\ttoggleVariateDescSize,\n\topenNoteDialog,\n\tcloseNoteDialog\n} = notesSlice.actions;\n\nexport default notesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}