{"ast":null,"code":"import { createSelector, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport navigationConfig from 'app/fuse-configs/navigationConfig';\nimport FuseUtils from '@fuse/utils';\nimport i18next from 'i18next';\nimport _ from '@lodash';\nconst navigationAdapter = createEntityAdapter();\nconst emptyInitialState = navigationAdapter.getInitialState();\nconst initialState = navigationAdapter.upsertMany(emptyInitialState, navigationConfig);\nexport const appendNavigationItem = (item, parentId) => (dispatch, getState) => {\n  const navigation = selectNavigationAll(getState());\n  return dispatch(setNavigation(FuseUtils.appendNavItem(navigation, item, parentId)));\n};\nexport const prependNavigationItem = (item, parentId) => (dispatch, getState) => {\n  const navigation = selectNavigationAll(getState());\n  return dispatch(setNavigation(FuseUtils.prependNavItem(navigation, item, parentId)));\n};\nexport const updateNavigationItem = (id, item) => (dispatch, getState) => {\n  const navigation = selectNavigationAll(getState());\n  return dispatch(setNavigation(FuseUtils.updateNavItem(navigation, id, item)));\n};\nexport const removeNavigationItem = id => (dispatch, getState) => {\n  const navigation = selectNavigationAll(getState());\n  return dispatch(setNavigation(FuseUtils.removeNavItem(navigation, id)));\n};\nexport const {\n  selectAll: selectNavigationAll,\n  selectIds: selectNavigationIds,\n  selectById: selectNavigationItemById\n} = navigationAdapter.getSelectors(state => state.fuse.navigation);\nexport const selectNavigation = createSelector([selectNavigationAll, ({\n  i18n\n}) => i18n.language], (navigation, language) => {\n  function setTranslationValues(data) {\n    // loop through every object in the array\n    return data.map(item => {\n      if (item.translate && item.title) {\n        item.title = i18next.t(`navigation:${item.translate}`);\n      } // see if there is a children node\n\n\n      if (item.children) {\n        // run this function recursively on the children array\n        item.children = setTranslationValues(item.children);\n      }\n\n      return item;\n    });\n  }\n\n  return setTranslationValues(_.merge([], navigation));\n});\nconst navigationSlice = createSlice({\n  name: 'navigation',\n  initialState,\n  reducers: {\n    setNavigation: navigationAdapter.setAll,\n    resetNavigation: (state, action) => initialState\n  }\n});\nexport const {\n  setNavigation,\n  resetNavigation\n} = navigationSlice.actions;\nexport default navigationSlice.reducer;","map":{"version":3,"sources":["D:/proyectos_react/Proyecto_sena_old/src/app/store/fuse/navigationSlice.js"],"names":["createSelector","createEntityAdapter","createSlice","navigationConfig","FuseUtils","i18next","_","navigationAdapter","emptyInitialState","getInitialState","initialState","upsertMany","appendNavigationItem","item","parentId","dispatch","getState","navigation","selectNavigationAll","setNavigation","appendNavItem","prependNavigationItem","prependNavItem","updateNavigationItem","id","updateNavItem","removeNavigationItem","removeNavItem","selectAll","selectIds","selectNavigationIds","selectById","selectNavigationItemById","getSelectors","state","fuse","selectNavigation","i18n","language","setTranslationValues","data","map","translate","title","t","children","merge","navigationSlice","name","reducers","setAll","resetNavigation","action","actions","reducer"],"mappings":"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","sourcesContent":["import { createSelector, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport navigationConfig from 'app/fuse-configs/navigationConfig';\nimport FuseUtils from '@fuse/utils';\nimport i18next from 'i18next';\nimport _ from '@lodash';\n\nconst navigationAdapter = createEntityAdapter();\nconst emptyInitialState = navigationAdapter.getInitialState();\nconst initialState = navigationAdapter.upsertMany(emptyInitialState, navigationConfig);\n\nexport const appendNavigationItem = (item, parentId) => (dispatch, getState) => {\n\tconst navigation = selectNavigationAll(getState());\n\n\treturn dispatch(setNavigation(FuseUtils.appendNavItem(navigation, item, parentId)));\n};\n\nexport const prependNavigationItem = (item, parentId) => (dispatch, getState) => {\n\tconst navigation = selectNavigationAll(getState());\n\n\treturn dispatch(setNavigation(FuseUtils.prependNavItem(navigation, item, parentId)));\n};\n\nexport const updateNavigationItem = (id, item) => (dispatch, getState) => {\n\tconst navigation = selectNavigationAll(getState());\n\n\treturn dispatch(setNavigation(FuseUtils.updateNavItem(navigation, id, item)));\n};\n\nexport const removeNavigationItem = id => (dispatch, getState) => {\n\tconst navigation = selectNavigationAll(getState());\n\n\treturn dispatch(setNavigation(FuseUtils.removeNavItem(navigation, id)));\n};\n\nexport const {\n\tselectAll: selectNavigationAll,\n\tselectIds: selectNavigationIds,\n\tselectById: selectNavigationItemById\n} = navigationAdapter.getSelectors(state => state.fuse.navigation);\n\nexport const selectNavigation = createSelector(\n\t[selectNavigationAll, ({ i18n }) => i18n.language],\n\t(navigation, language) => {\n\t\tfunction setTranslationValues(data) {\n\t\t\t// loop through every object in the array\n\t\t\treturn data.map(item => {\n\t\t\t\tif (item.translate && item.title) {\n\t\t\t\t\titem.title = i18next.t(`navigation:${item.translate}`);\n\t\t\t\t}\n\n\t\t\t\t// see if there is a children node\n\t\t\t\tif (item.children) {\n\t\t\t\t\t// run this function recursively on the children array\n\t\t\t\t\titem.children = setTranslationValues(item.children);\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\n\t\treturn setTranslationValues(_.merge([], navigation));\n\t}\n);\n\nconst navigationSlice = createSlice({\n\tname: 'navigation',\n\tinitialState,\n\treducers: {\n\t\tsetNavigation: navigationAdapter.setAll,\n\t\tresetNavigation: (state, action) => initialState\n\t}\n});\n\nexport const { setNavigation, resetNavigation } = navigationSlice.actions;\n\nexport default navigationSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}